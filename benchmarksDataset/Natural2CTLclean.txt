AG(AWVALID & !AWREADY) -> (AWID)
AG(AWVALID -> (AWID != X))
AG(AWVALID & !AWREADY -> (AWADDR))
AG(AWVALID  -> (AWADDR != X))
AG(AWVALID & !AWREADY -> (AWLEN))
AG((A) -> (! EF(!B)))
AG(!reset -> (AWVALID != X))
AF(ARESETn -> AF(! AWVALID))
AG(AWVALID -> (E(! AWREADY U AWREADY)))
AG(!(CSYSACK) -> ((CSYSREQ) & (!CSYSREQ)))
AG(!reset -> (ACREADY != X))
AG(!reset -> (ARCACHE != X))
AG(ARDOMAIN >= 1)
AG(AWPROT <= 1)
AG(!reset -> (AWSNOOP != X))
AG(ACADDR -> AWREADY)
AG(AWREADY -> (! ACADDR))
AG(AWSNOOP -> (! ARCACHE))
AG(AWREADY -> AF(ACADDR & A((!ACADDR) U AF(ACADDR))))
AG(ARESETn -> AF(ACVALID != X))
AG((ARPOOT & !ACSNOOP) -> (!AWSIZE))
AG((ARPOOT & !ACSNOOP) -> (ACADDR))
AG((ACADDR & !ARESETn & AWPROT) -> AF(ARESETn))
AG(AWSNOOP -> A(AWSNOOP U ARDOMAIN))
AG((!CSYSACK & (CSYSACK)) -> AF(CSYSREQ))
AG((AWVALID & AWCACHE > 1 & !AWREADY) -> (AWPROT))
AG((AWID & !AWCACHE) -> (AWCACHE != X))
AG((AWID & !AWVALID) -> (AWCACHE != X))
AG((b -> AF(A(c U a) | AG(c))))
EG(b) -> A(!b U (a & !b))
AG((a | b | c))
EG(!down)
AG(!down)
AG(EF(startNew))
AG((A(operational U down)) & AF(down))
AG(!at_i -> (!doorOpen_i))
AG(button_i -> A(request_i W fulfilled_i))
AG(moving -> EG(request_i))
AG(request_i -> AF(fulfilled_i))
AG(button_i -> AF(fulfilled_i))
AF(at)
AG(button_n1 -> A(!at_i U at_n1))
AG(!deadlock)
EF(p)
AG(p -> Xr)
A((!p) U (p & EG(!p)))
AF(p) -> A((!r) W AG(!p))
(AF p & AF r) -> A((!p) U AG(!r))
AG(IsThisSideActive -> (ModeAnnunciationsOn == OnsideFDOn | ModeAnnunciationsOn == OffsideFDOn | ModeAnnunciationsOn == IsAPEngaged))
AG((!OnsideFDOn & !IsAPEngaged)-> AF(IsAPEngaged -> OnsideFDOn))
AG((!ModeAnnunciationsOn & !OnsideFDOn) -> AF((IsThisSideActive & OnsideFDOn) -> ModeAnnunciationsOn))
AG((!ModeAnnunciationsOn & !OffsideFDOn) -> AF((IsThisSideActive & OffsideFDOn) -> ModeAnnunciationsOn))
AG((!ModeAnnunciationsOn & !IsAPEngaged) -> AF((IsThisSideActive & IsAPEngaged) -> ModeAnnunciationsOn))
AG(ModeAnnunciationsOn -> AF((IsThisSideActive & !OnsideFDOn & !OffsideFDOn & !IsAPEngaged) -> (!ModeAnnunciationsOn)))
(!ModeAnnunciationsOn)
AG(IsThisSideActive -> (ModeAnnunciationsOn == OnsideFDOn | ModeAnnunciationsOn == OffsideFDOn | ModeAnnunciationsOn == IsAPEngaged))
AG(FRAME -> AF(!FRAME & IRDY))
AG(Trigger -> AF(Transaction))
AG(FRAME -> AF(!FRAME))
AG(TRDY -> AF(TRDY & STOP -> EF(TRDY & STOP)))
AG(REQ -> AF(GNT))
AG(devsel -> AF(!devsel -> (!FRAME)))
AG(DEVSEL -> AF(TRDY))
AG((STOP & IRDY) -> (AF(!FRAME)))
AG(Reset)
AG(AWVALID -> AF((AWBURST)))
AG(ARESETn -> AG(!(AF(BVALID))))
AG(WVALID -> (WUSER != X))
AG(!reset -> (CACTIVE != X))
AG((RVALID & !RREADY) -> ((RLAST)))
AG(WDEPTH >= 1)
AG(request -> AF (state == busy))
AG EF(!MCP_missionaries & !MCP_cannibals)
AG(requestCreateAccount -> AF(userAccountCreated))
AG((usernameProvided & passwordProvided) -> AF(login))
AG(userLogin -> AF(passwordUpdate))
AG(userLogin -> AF(bookmarkAdd))
AG(userLogin -> AF(bookmarkRetrieval))
AG(userLogin -> AF(bookmarkDelete))
AG(userLogin -> AF(bookmarkUpdate))
AG(userLogin -> AF(bookmarkPublic | bookmarkPrivate))
AG(userLogin -> AF(tagsAdded))
AG(publicBookmark -> AF(retrievePublicBookmark))
AG(searchByTag -> AF(publicBookmarkOfSpecificUser))
AG(searchByTag -> AF(publicBookmarksOfAllUsers))
AG((userLogin & searchByTag) -> AF(privateBookmarks))
AG(refreshDisplay)
AG(normalBusinessHours & userAccess & firstSixMonths -> AG(productAvailable))
AG(AccessByAuthorizedUsers)
AG(DataUpdated -> AF(FastResponse))
AG(MDIFormExists -> (AG(graphView) & AG(dataTableView)))
AG(eventTable)
AG(eventGraph)
AG(accessibleByInternalUsers & accessibleByExternalUsers)
AG(userAccess -> AG(!userAccess & userAccess & AG(cardholderBase)))
AG((userInterface & realTimeResponse) -> EF(directDataEntry))
AG((caseClosed & timeElapsed >= 6) -> EF(casePurged))
AG(authorizedUser -> AF(viewAccess))
AG(authorizedUser -> AF(updateAccess))
AG(selectTransaction -> AF(initiateDispute))
AG(selectMultipleTransactions & sameMerchant -> EF(initiateDispute))
EF(createTicketRequest) | EF(initiateTicketRetrieval)
AG(createTicketRequest -> (EF(requestForOriginalReceipt) | EF(requestForCopyOfReceipt) | EF(requestForPortfolio)))
AG(externalUser -> AG(!requestForOriginalReceipt))
AG(createTicketRequest) -> AF(confirmationOfTicketRetrievalRequest)
EF(createChargebackRequest | initiateChargebackRequest)
AG(createChargebackRequest -> AF(promptEnterChargebackInfo))
AG(createChargebackRequest -> AF(confirmationWithInfo)) & confirmationWithInfo -> (disputeCaseNumber & chargebackType & merchantResponseDueDate)
AG(!duplicateDisputeRequest)
EF(viewDisputeCases)
AG(searchFunctionality -> (AG(searchByDisputeCaseNumber) & AG(searchByMerchantAccountNumber) & AG(searchByCardMemberAccountNumber) & AG(searchByIssuerNumber)))
AG((searchFunctionality -> AF(listOfDisputeCases)))
AG(viewHistoryFunctionality -> AF(viewActivityHistory))
AG(followUpFunctionality -> (AG(filterByStatusAndAccessLevel) -> AF(listOfAvailableFollowUpActions)))
AG((createDisputeCaseAction | modifyDisputeCaseAction) -> (AG(userNameRecorded) & AG(dateRecorded)))
AG(searchFunctionality -> EF(searchResultsTime <= 15))
AG(searchForPreferredRepairFacility -> EF(returnedPreferredRepairFacility <= 8))
AG(requestAudit -> AF(auditReturned))
EF(preferredRepairFacilityRatings -> AG(saveTime <= 5))
AG(applicationAvailable -> EF(scheduledOutageTime <= totalTime))
AG(ApplicationAvailable -> EF(FailureTime <= TotalTime))
AG(systemPerformance -> EF(simultaneousUsers <= 1500))
AG (averageRecycledPartsRecordsPerDay ==50000)
AG(productLaunched -> EF(concurrentUsers <= 10000 & timeSinceLaunch <= 2))
AG(requestAudit -> AG(adjusterRole))
AG((adjusterRole & supervisorRole) -> EF(updateRatings)) & AG(updateRatings -> AF(adjusterRole & supervisorRole)) & AG(!supervisorRole -> AG(!accessRatings))
AG(collisionEstimatorRole -> EF(searchRecycledParts)) & AG(searchRecycledParts -> AF(collisionEstimatorRole)) & AG(!collisionEstimatorRole -> AG(!accessRecycledPartsSearch))
AG(validData)
#AG(forall i,j : i != j => (insuranceCompany_i -> AG(!viewClaimData_j)))
AG(!computerVirus)
AG(!denialOfService)
AG(earchFacility -> AF((userLocation & searchRadius) & facilityLocation))
#AG(VehicleDat_(yearMake, model))
AG(vehicleLocation -> (streetAddress & city & state & zipCode))
AG((!zipCode & streetAddress & city & state) -> EF(zipCodeResolved))
AG(searchRadius >= 1 & searchRadius <= 30)
AG(searchFacility -> AF(highestRatingFacility))
AG(estimateAssignment -> AF(preferredFacilityEntered))
AG(estimateAssignment -> AF (overrideFacility | preferredFacility))
AG(preferredFacilityReturned)
AG((!preferredFacility & searchFacility) -> EF(listOfFacilities))
AG(estimator -> AF(searchRecycledParts))
AG(estimator -> AF(recycledPartsSearchedUsingSuppliers))
AG((!foundPartsPreferredSupplier & !foundPartsZipcode) -> EF(foundPartsForZipRadius & searchRadius <= 30))
AG(searchConducted & resultsReturned -> AF(partsAndSuppliersRetained))
AG((recycledPartsInfo & suppliersInfo) -> AF(infoReturnedToUser))
AG(partsSelected -> AF(partsApplied))
AG(noPartsReturned -> AG(!partsApplied))
AF(reviewEstimate)
AF(requestAudit)
AG(searchResultsProvided -> AF(systemRetrievesResults))
AG((availableRecycledParts & collisionEstimateReady) -> AF(auditReportGenerated))
AG(auditReportGenerated -> AF(totalRecycledPartsIncluded))
AG(auditReportGenerated -> AF(availablePartsIncluded))
AG(auditReportGenerated -> AF(percentageAvailablePartsIncluded))
AG(auditReportGenerated -> AF(totalAuditScoreIncluded))
AG(auditReportGenerated -> AF(auditReportDisplayed))
AG(auditReportGenerated -> AF(auditReportAvailable))
AG(userSelectsViewRatings -> AF(repairFacilityRatingsDisplayed))
AG(currentRatingsDisplayed)
AG(!ratingsDefined -> AF(blankRatingsDisplayed))
AG(auditReport -> EF(newRatingsEntered))
AF(rating >= 1 & rating <= 10)
AF(selectSaveRatings)
AF(savedRatings)
AG((responseTime <= 5) -> AF(TasksCompletedNinety)) & AG((responseTime <= 8) -> AF(TasksCompletedNinetyEight))
AG((!serverFailure) -> AF(upTime >= 99.99))
AG(problem -> AF(exceptionLog & AF(AF(transmission))))
AG(peakTime -> (concurrentRequests <= 1000))
A(AG!productAgeInYears<=2 W (productAgeInYears<=2 & AF(transactionsPerHour >= 10000)))
A(AG(release != 2) W (release == 2 & AF(transactions == 20000)))
AG(installationAge <= 5)
AG(productAccess -> AF (isEmployee | hasApprovedId))
AG(searchReservationByUser -> AF(managementLogon)) 
AG(enterData -> AF(dataInDatabase == enteredData))
AG(maliciousDataInput -> AF(dataUncorrupted))
AG(maliciousDataInput -> AF(systemOperational))
AG(automaticUpdatesAvailable -> AF(customersReceiveUpdates))
AG(meetingEntry -> AF(recorded))
AG(meetingInvitation -> AF(notified))
AG(meetingScheduled -> AF(reminderSent))
AG(meetingCreated -> AF(organizerContactAssigned))
AG(meetingAcknowledged -> AF(acknowledgmentRecorded))
AG(conferenceRoomAdded -> AF(conferenceRoomStored))
AG(conferenceRoomUpdateRequest -> AF(conferenceRoomUpdated))
AG(conferenceRoomDeletionRequest -> AF(conferenceRoomDeleted))
AG(newRoomEquipmentRequest -> AF(roomEquipmentStored))
AG(updateRoomEquipmentRequest -> AF(roomEquipmentUpdated))
AG(deleteRoomEquipmentRequest -> AF(roomEquipmentDeleted))
AG(organizerInvitesEmployees -> AF(employeesInvited))
AG(conferenceRoomReserved -> AF(conferenceRoomScheduleUpdated))
AG(equipmentReserved -> EF(transportationStatusRecorded))
AG(displayMap -> AF(conferenceRoomLocations))
AG(updateAgenda -> AF(meetingAgendaUpdated))
AG(createMeeting -> AF(meetingConfirmationSent))
AG(searchParameters -> AF(displayRoomEquipment))
AG(searchParameters -> AF(displayConferenceRooms))
AG(recordMeeting -> AF(meetingTypeRecorded))
AG(equipmentReserved -> AF(recorded))
AG(equipmentTransportRequest -> AF(notifyBuildingPersonnel))
AG(privilegedUser -> AF(multipleReportingViews))
AG(sendNotifications -> AF(notificationsSentViaDifferentMethods))
AF(lookAndFeelCustomized)
AF(intuitiveUI)
AG(conferenceRoomUnreserved -> AF(displayAvailableStatus))
AG(inventoryQuantityAdjustmentRecreationInProgress -> AF(timeSpentOnRecreation <= 30))
AG(numberOfActiveUsers >= 6)
AG((changePassword | changePermissions) -> AF(consistentSecurity))
#AG(forall j: subsystem_j -> AF(forall i: accessRightsAssigned(i, j)))
AG(inventoryQuantityAdjustmentRequested -> AF(documentGenerated))
AG(inventoryQuantityAdjustmentRequested -> AF(documentGenerated))
AG(currentInventoryStatus -> AF(inventoryAdjusted))
AF(enterFormula) & AF(storeFormula) & AF(modifyFormula)
AG(productFormula -> AF(useSemiProduct))
AG(productFormulaIngredient -> AF(defineSubstitutionaryIngredient))
AG(substitutionaryIngredient -> AF(enteredAutomaticallyByPFE))
AG(persistedOrderKept)
AF(enterMenu) & AF(storeMenu) & AF(modifyMenu)
AG(accountingSystemProducts -> AF(buildProductMenus))
AG(PMESubsystemActive -> AF(managedAndPersistedOrder))
AG(PMESubsystemActive -> AG(productInMultipleSubmenus))
AG(productDailySalesData & productFormulas -> AF(inventoryQuantityAdjustment))
AG(productSalesDataAvailable -> AF(inventoryQuantityAdjustment))
AG(adminSectionAccessed -> AF(prePaidCardActivated))
AG(pinEntered -> AF(prepaidCardStatusChecked))
AG(customerRegistrationInitiated -> AF(payAsYouGoUserRegistered))
AG(customerRegistrationInitiated -> AF(unlimitedMovieSubscriberRegistered))
AG(customerLoginAttempt -> AF(customerLoggedIn))
AG(accountCancellationRequested -> (AF(accountMarkedInactive) & AG(accountMarkedInactive -> (!EF(customerLoggedIn)))))
AG(adminDeactivateAccountRequested -> (AF(customerAccountDeactivated) & AG(customerAccountDeactivated -> (!EF(customerAccessesWebsite)))))
AG(adminAddMovieRequested -> AF(movieAddedToWebsite)) & AG(adminRemoveMovieRequested -> AF(movieRemovedFromWebsite))
AG(movieAddedToWebsite -> AF(movieInfoStoredInDatabase) & AF(movieAvailableOnWebsite))
AG((adminAddCategory | adminRemoveCategory) -> AF(categoryUpdatedOnWebsite))
AG(IzognManagerRequestsStatistics -> AF(statisticsAccessed))
AG(adminRequest -> AF(pinsGenerated & timeUnder2min)) & AG(pinsGenerated -> AF(excelCreated))
AG(userInteraction -> AF(systemResponse & responseWithinTime))
AG((moviePurchaseRequest | prePaidCardPurchaseRequest) -> AF(purchaseResponse & purchaseResponseWithinTime))
AG(movieStreaming -> AF(buffered & bufferedWithinTime))
AG(streamingMovie -> (connectionLatency == bufferingOccurs))
AG(creditCardInfoSecured & (authorizedAdmin -> creditCardInfoAccessible))
AG(websiteAvailable)
AG(movieRequested -> AF(movieStreaming))
AG(streamingServerDown -> AG(websiteOperational))
AG(paymentGatewayDown -> AG(websiteOperational))
AG(activeConnections <= 50)
AG(movieCount <= 700)
AG(simultaneousUsers <= 1000)
AG(totalCustomers <= 100000)
AG(updateRequest -> AF(updateCategory & timeElapsed <= 2))
AG(addProductRequest -> AF(addProduct & timeElapsed <= 2))
AG(purchaseStreamingMovie -> AF(registeredCustomer))
AG(streamMovie -> (purchasedMovie & viewingPeriod <= 2))
AG(accessCustomerRecords -> authorizedPersonnel)
AG(activatePrepaidCard -> administrator)
AG(accessSalesInfo -> authorizedPersonnel)
AG(incorrectData -> AG(!dataCorruption))
AG(intentionalAbuse -> (protection & AF(notifyAdministrator)))
AG(isWeekly -> runDataIntegrityScripts)
AG(privacyPolicyAccessible)
AG(infoPolicyChanged -> AF(customerNotified))
AG(revealPrivateInfo -> EF(complyInfoPolicy))
AG((secureDatabase & customerInformation) -> AF(authorizedAccess))
AG(creditCardInfo -> AF(encrypted))
AG(streamingServer -> AF(antiVirusSoftware))
AG(searchByTitle & searchByActor & searchByDirector)
AG(adminDataEntered -> EF(displayDescription & displayActor & displayDirector))
AG(requestPayment -> AF(authorizePayment & AF(streamMovie)))
AG(moviePurchased -> AF(streamMovieWithWMP & movieStreamingTime <= 2))
AG(categoriesEntered -> AF(browseCategories))
AG(selectMovie -> AF(viewReviews))
AG(selectMovie -> AF(addReview))
AG(postReview -> AF(approveReview))
AG(selectMovie -> EF(payWithPrepaidCard))
AG((purchasePrepaidCard & (creditCardPayment | mailInPaymentMethod)) -> AF((cardValue == 5) | (cardValue == 10) | (cardValue == 20)))
AG((dayOfWeek == Friday) -> AF(updateMainPage & (latestMoviesCount == 4)))
AG(accessMyAccount -> (AF(updateBillingInfo) & AF(updateContactInfo)))
AG(purchasePrepaidCard -> (AF(emailDistribution) | AF(printedPaperCard)))
AG(purchaseMovie -> EF(registeredCustomer))
AG(streamMovie -> EF(purchasedMovie & withinTwoDayPeriod))
AG(streamingMovieSale -> EF(loggedInDatabase & accessibleByAdmin))
AG(cancelAccount -> AF(storedInDatabase & maintained))
AG(administrator -> AF(accessibleStatistics)) & AG(statisticsLogged)
AG(owner -> AG(freeAccess))
AG(leadProcessingTime > 25 -> AF(recordEvent & recordDuration))
AG(defectReportAvailable)
AG(invalidLead -> AF(vendorVerification))
AG(submitRecord -> AF(applyToBillingSystem))
AG(highRangeScore -> AF(supplyToEnterpriseSystem))
AG(webServiceLeads -> AF(validateLeads))
AG(webServiceLeads -> AF(insertLeads))
AG(highAverageScore -> AF(ARAprocess))
AG(mediumAverageScore -> AF(manualVerification))
AG(lowAverageScore -> AF(returnedToVendor))
AG(contactScoring & academicScoring -> AF(totalScore))
AG((corporateParams & schoolParams) -> AF(partialLeadScore))
AG(leadRejected -> AF(leadDataReturned & reasonOfRejection))
EF(interfaceForLeadDataParameters)
AG(userUpdatesParameters -> AF(authenticationVerified & rightsVerified))
AG(enterpriseSystemReturnsDuplicates -> AF(storeDuplicates))
AG !submitToEnterprise & (assignAdmissionsRep)
AF(receiveAvailableReps)
AF(simulateShipsAtSea)
AG(handleLargeNumberOfGames)
AG(playerAccess -> AF(!identityReveal))
AG(!identityReveal)
AG(playerList)
AG(userIdentifies -> AF(playerAdded))
AG(gameInitiated -> AF(playersUnavailable))
AF(playerRemoval)
AG(inactivePlayer -> AF(unavailableForSelection))
AG(inactiveFor24Hours -> AF(removedFromList))
AG(selectAnotherPlayer -> AF(gameInitiated))
AG(gameInitiated -> AF(displayDefensiveGrid))
AG(gameInitiated -> AF(displayOffensiveGrid))
AG(playerViewAttempt -> AF(!viewOtherPlayerGrid))
AG(gameInitiated -> AF(place5Ships))
AG(allowPositionShips -> AF(horizontalPlacement))
AG(allowPositionShips -> AF(verticalPlacement))
AG(allowPositionShips -> AF(diagonalPlacement))
AG(allowPositionShips -> AG(!overlapShips))
AG((positionShips_i & positionShips_j) -> A(!defineStatus U (defineStatus_i & defineStatus_j)))
AG(turn -> ((offensiveStatus_i & defensiveStatus_j) | (offensiveStatus_j & defensiveStatus_i)))
AG((offensiveStatus_i & defensiveStatus_j) -> AF(offensiveStatus_i & defensiveStatus_j))
AG(startTurn -> AF(notifyStatus))
AG(offensiveTurn -> AF(defineShot))
AG(defineShot -> AF(examineGrid))
AG(examineGrid -> AF(notifyPlayers))
AG(examineGrid -> AF(markDefensiveGrid))
AG(examineGrid -> AF(markOffensiveGrid))
AG(sinkShip -> AF(notifyPlayers))
AG(sinkShip -> AF(markSunkDefensiveGrid))
AG(sinkShip -> AF(indicateShipTypeDefensiveGrid))
AG(sinkShip -> AF(markShipSunkOffensiveGrid))
AG(markHit -> AF(defineShot))
AG(markMiss -> AF(changeStatusToDefensive))
AG(markMiss -> AF(changeStatusToOffensive))
AG(!gameEnded -> AF(assignTurn))
AG((hit & allShipsSunk) -> AF(gameEnded))
AG(playerRequestToEnd -> AF(gameEnded))
AG(gameEnded -> AF(notifyPlayers))
AG(gameEnded -> AF(notifyPlayers & (gameWon | playerEnded)))
AG(gameEnded -> AF(identifyAsAvailable))
AG(gameEnded -> AF(removeFromPlayers))
AG((currentTime >= 0 & currentTime <= 18) -> systemAvailable)
AG((currentTime >= 7 & currentTime <= 23) -> systemAvailable)
AG((isSupervisor -> AF(accessAdvertiseEmptySlots)) & (!isSupervisor -> AF(!accessAdvertiseEmptySlots)))
AG((isSupervisor -> AF(enterCallersSchedule)) & (!isSupervisor -> AF (!enterCallersSchedule)))
AG((isSupervisor -> AF(viewAllCallersSchedule)) & (!isSupervisor -> AF(!viewAllCallersSchedule)))
AG(asyncMessagingEnabled -> AF(parallelProcessing & reducedOverhead))
AG(dataLoadSpikes -> AF(multiThreading & loadBalancing))
AG(messageProcessingTime <= 2)
AG(pollingInterval <= 1)
AG((transparentResourceAddition & dynamicChangeSupport) -> AF(scalability & !serviceInterruptionMoreThan1Day))
AG(regularBusinessDay -> (availability >= 99.99))
AG(productRobustness & faultAvoidance)
AG(processAllTransactions & millionTransactionsPerYear)
AG(authentication & authorization)
AG(privacy & integrity)
AG(auditCapabilities -> AF(storeMessages & (auditTrackingPeriod >= 1)))
AG(W3Accessible -> AF(WCSAvailable))
AF(canConnect)
AG(managementApproval -> AF(accessOutsideUS))
AG(systemAccess -> AF(authenticated & isCCREmployee))
AG(!automaticLogin & !storeCookies)
AG(teamOwner -> AF(authenticated & teamOwnerPage))
AG(commissioner -> AF(commissionerAdjustSettings))
AG(requestReceived -> AF(transactionCompleted))
AG(N <= 350 -> (!degradation))
AG(upTimePercentage >= 95)
AG(searchTime <= acceptableTime)
AG(searchCriteriaEntered -> AF(searchTime <= 30))
AG(generateCMAReport -> AF(acceptableTime))
AG(cmaCriteriaEntered -> (cmaReportTime <= 60))
AF(sync & acceptableTime)
AG(hourElapsed -> AF(syncWithOffice))
AG(productAvailable)
AG(accessCount <= 1000 -> AF(systemAvailableCount >= 999))
AG(internetUnavailable -> AF(offlineMode))
AG(viewSearchResults & viewCMAReports & viewAppointments)
AG(failure -> AF(retainPreferences))
AG(systemOnline -> AF(restorePreferences))
AG(supportMultiRemoteUsers)
AG(simultaneousUsers <= 1000)
AG(currentUsers <= 1000) & AG(yearPassed -> AF(usersGrown))
AG(registeredRealtor -> AF(accessGranted))
AG(user -> AF(authenticated & authorized))
AG(!incorrectData)
AF(agentQueryMLS)
AG(SelectProperty -> AF(getDrivingDirections))
AF(downloadAppointments) & AF(downloadContactInfo)
AG(displayClearPropertyImages)
AG(handleUserRequests)
AG(caterSimultaneousUsers)
AG(processNursingStudents & processClasses)
AG(manageCurriculum & manageClassScheduling)
EF(callToScheduleAppointment)
AG(syncWithOffice -> AF(realtorNotified))
AG(requestMap -> AF(mapRetrieved))
AG((sellerResponse | buyerResponse) -> AF(realtorNotified))
AF(userSavesSearchResults)
AG(tasksAssigned -> AF(tasksCompleted & timelyManner))
AG(studentManagementTasks -> responseTime <= 5) & AG(scheduleGeneration -> responseTime <= 30)
AG((currentTimeInHours >= 8  & currentTimeInHours <= 18) -> AG(systemAvailable))
AG(userAuthorized -> AF(accessClinicalSiteInfo))
AG(programAdmin | nursingStaff -> AF(accessClinicalSiteDetails))
AG(authorizedUser -> AF(accessPersonalInfo))
AG((user == DrSusanPoslusny) | (user == DrJulieDonalek) -> AF(accessPersonalInfo))
AG(authorizedUser -> AF(accessCampusConnect))
AG((user == DrSusanPoslusny | user == KarenSysol) -> AF(accessFinalClassSectionScheduling & CampusConnect))
AG(dataInput -> AF(dataIntegrityChecked))
AG(dataInput -> AF(protectedAccordingToPolicy))
AG(!systemUnderThreat)
AG(cohort -> EF(programOfStudy))
AG((programAdmin | nursingStaff) -> AF(addStudentsToCohort))
AG((programAdmin | nursingStaff) -> AF(addSingleStudentToCohort))
AG(addStudentToCohort -> AF(studentEligibleForProgram))
AG((programAdmin | nursingStaff) -> AF(specifyPreferredSequence))
AG((programAdmin | nursingStaff) -> AF(specifyQuarterForClass))
AG((programAdmin | nursingStaff) -> AF(addClassToSequence))
AF(displaySyncMatrixData & displayExerciseManagementToolData)
AG(eventLinkedToSyncMatrix | eventLinkedToExerciseManagementTool)
AF(modifyDisplay)
AG(displayAllEvents)
AG(filterByVenues) & AG(filterByKeyEvents)
AG(allowUserDefineTimeSegments)
AG(displayLocalTime & displayExerciseTime)
AG(pauseDataRefresh -> AF(resumeDataRefresh))
AG(provideCharts)
AG(budgetingPeriod -> AF(RFSavailability))
AG(budgetingPeriod -> AG(systemAvailable))
AG((UASUser & RFSRole) -> AF(accessRFS)) & AG(accessRFS -> authorizedUser)
AG((routineCommunication & upcomingClasses) -> AF(notifyAffectedParties))
AG((clinicalSectionCapacityChange | clinicalSectionCancellation) -> AF(notifyAffectedParties))
AG((classCancellation | classSectionDetailChange | classOfferingChange) -> AF(notifyAffectedParties))
AG(communication -> EF(useStoredEmailAddresses))
AG(userAccess -> AF(validPermission))
AG((requested & VehicleCore) -> AF(allowedTransition))
AG(clientRegistered -> AF(sendNotification))
AG(uavActivated -> AF(uniqueIDAssigned))
#AG(forall u: forall f1, f2: (f1 != f2) -> ((executing(u, f1) -> !executing(u, f2))))
#AG(forall i, j: (i != j) -> ((drone_i -> !drone_j) & (drone_j -> !drone_i)))
#forall i: AF(uavType_i)
AG(waypoint_i -> (longitude_i & latitude_i & altitude_i))
AG(flightPlanExecuted -> AF(nextWaypointSent_i))
#forall i, j: AF(pendingFlightPlan(i, j))
AG(unassignRequest_i & flightPlanAssigned_i & awaitingExecution_i -> AF(flightPlanUnassigned_i))
#forall i: AG((pendingFlightPlans_i & finalWaypointReached_i) -> AF(nextFlightPlanExecuted_i))
#forall i: AG((flightCancelled_i) -> AG(!scheduledFlightPlan_i))
#forall i: AF(uiClientRegistered_i)
#forall i: AG(controlClientAssigned_i)
#forall i: AG(commandIssued_i -> AF(controlRequested_i))
A(!mapDisplayed U (realTimeFlightUiLoaded & mapDisplayed))
#forall i: AG(uavActive_i -> uavIconDisplayed_i)
#forall i: AG(objectProximity_i -> evasiveDirectiveIssued_i)
#forall i: AG(evasiveActionTaken_i -> AF(destinationReached_i))
#forall i, c: AG(commandIssued(i, c) -> withinCapabilities(i, c))
#forall i: AG(activeOnboardAvoidance_i -> !directiveIssued_i)
#forall i: AG(gcsRequestActivation_i -> AF(activationRequestForwarded_i))
#forall i: AG(uavActivated_i -> uavRegistered_i)
#forall i: AG(gcsConnectionLost_i -> AF(gcsReconnectAttempt_i))
#forall i: AG(returnHomeCommand_i -> (AF(returnHomeInProgress_i) & (!additionalWaypoint_i & !routingCommand_i)))
#forall i, j, k: AG((flightRoute_i & waypointOrder(i, j, k)) -> (AF(firstWaypoint(i, j)) & AF(finalWaypoint(i, k))))
#forall i: AG(flightRoute_i -> AF(VALID_FLIGHT_ROUTE_i))
#forall i: AG(flightRoute_i -> AF(persistedFlightRoute_i))
#forall i: AG(customTakeoffAltitudeRequired_i -> EF(takeoffAltitudeSpecified_i))
#forall i: AG(requestTransformCoordinates_i -> AF(transformedCoordinates_i))
#forall i, j: AG(requestDistance(i, j) -> EF(distanceComputed(i, j)))
#forall i, j: AG(requestDirection(i, j) -> EF(directionComputed(i, j)))
#forall i: AG(hoverInPlaceCommand_i -> AF(hoveringInPlace_i & currentPositionMaintained_i))
#forall i: AG((hoveringInPlace_i & flightRouteAssigned_i) -> AF(currentPositionMaintained_i))
#forall i: AG((activeFlightPlan_i & hoverCommandRescinded_i) -> AF(continueToOriginalWaypoint_i))
#forall i: AG((flightPlanActivated_i & onGround_i) -> AF(verticalTakeoff_i & reachesPrescribedAltitude_i))
EG(managesPredefinedFlightPatterns)
AG(requestCancelActiveMission & missionActive -> AF(missionCancelled))
AG(requestScheduleRoute -> AF(routeScheduled))
#forall i: AG(route(i=ID) -> AF(routeAssignedToUAV_i))
#forall i: AG((!manualRouteAssignment_i) -> AF(autoRouteAssignment_i))
#forall i: AG((!PendingFlightPlans_i & finalWaypointReached_i) -> AF(hoverInPlace_i))
AG(abortRequest_i & executingFlightPlan_i -> AF(flightPlanAborted_i))
#forall i, j: AG(flightPattern_i -> AF(waypointLongitudeOffset(i, j) & waypointLatitudeOffset(i, j) & waypointAltitudeOffset(i, j)))
#forall i, j: AG((assignedMission_i & assignedMission_j & (i != j) & overlappingPaths(i, j)) -> EF(warningProvided))
AG(UAVConnectedViaGCS -> EF(supportedByVehicleCore))
AG(virtualUAV -> EF(supportedByVehicleCore))
#foral i: AG(UAVDeactivated_i -> AF(cancelCurrentFlightPlan_i & cancelScheduledFlightPlans_i))
AG(maxUAVsReached -> AF(rejectActivationRequest))
AG(UAVRegistered -> EF(UAVMetadataStored))
AG(usingInternalSimulator -> EF(approximateUAVBehavior))
AG(takeoffCommand -> AF(moveToTakeoffAltitude))
AG(gotoCommand -> AF(A(updateLocation & (distanceRemaining <= SIMULATION_STEP_SIZE) U destinationReached)))
AG(landingCommand -> AF(movedToGroundAltitude))
AG(approximateBatteryState)
AG(flightPlanEvent -> AF(logged_flightPlanEvent))
AG((commandSentToCGS | messageReceivedFromCGS) -> AF(logged_commandSentToCGS | logged_messageReceivedFromCGS))
AG(requestActiveUAVsList -> AF(activeUAVsListProvided))
AG(requestExistingRoutesList -> AF(existingRoutesListProvided))
AG(commandFromUI -> AF(commandForwardedToDronology))
AG(createFlightRouteRequest -> AF(flightRouteCreated)) & AG(modifyFlightRouteRequest -> AF(flightRouteModified))
#forall i: AG(routeToBeAssigned & uavActive_i -> AF(routeAssignedToActiveUAV_i))
AG(activateMissionPlanRequest -> AF(missionPlanActivated))
AG(VaadinUIActivated -> AF(VaadinUIConfiguredAccordingToStoredParameters))
AG(loadMapView -> AF(mapViewPositioned == predefinedLocation))
#forall i: AG(UIRouteSelection & UAVSelection_i -> AF(routeAssignedToUAV_i))
#forall i: AG(UIRouteUnassignment & UAVSelection_i -> AF(routeUnassignedFromUAV_i & dronologyNotified))
AG(UAVDetailsRequest -> AF(UAVDetailsDisplayed & flightPlansDisplayed))
#forall i: AG(UAVSelection_i -> AF(activeFlightPlansDisplayed_i))
#forall i, j: AG((!executingFlightPlan(i, j) & (routeReorderRequest_i | removeFlightPlanRequest_i)) -> AF(routeReordered_i | flightPlanRemoved_i))
#forall i, j: AG(cancelPendingFlightPlanRequest(i, j) -> (AF(pendingFlightPlanCancelled(i, j)) & AF(dronologyNotified(i, j))))
AG(RouteCreationUI_ -> AF(startingWaypointMarker & endingWaypointMarker & intermediateWaypointMarkers))
AG(RouteCreationUI_ -> AF(ValidAltitudeValues & ValidSpeedValues))
AG(route -> AF((uniqueID & textualDescription & waypointSet) & (editableID & editableDescription & editableWaypoints)))
AG(RouteRequest -> AF(ModifiedRouteSentToDronology | NewRouteSentToDronology))
AG((requestRouteCreation -> AF(routeCreated)) & (requestRouteModification -> AF(routeModified)))
AG(requestRouteDeletion -> AF(routeDeleted))
AG(loadRouteCreationUI -> AF(existingRoutesDisplayed))
AG(activatedUAVs -> AF(displayName & displayStatus))
AG(activeFlightPlans -> AF(displayFlightPlans))
AG(userSelectUAVs -> AF(applyFlightOperations))
AG(userSelectGroupUAVs -> AF(performEmergencyOperations))
AG(userSelectUAVs -> AF(followUAVsOnMap))
AG(emergencyOccurs -> AF(notifyUsers))
AG(retrieveMonitoringMessages -> AF(distributeToClients))
AG(newMonitoringMessageReceived -> AF(forwardMessageToSubscribedClients))
AF(messageFromDronologyComponent)
AF(handleMultipleGCS)
AG(initiateConnection -> AF(establishConnection))
AG((StateMessage | MonitoringMessage | ModeChangeMessage) -> AF(GCSMiddlewareHandlesMessage))
AG(dronologyCommand -> AF(forwardToGCS))
AG(connectionLost -> AF(notifyDronology & deactivateUAVs))
AG(commandReceived -> AF(commandForwarded_i))
#AG(forall i : assignMessageFrequency_i)
#AG(forall i : newUAVConnected_i -> AF(reportNewUAV_i))
#AG(forall i : UAVLocationUpdated_i -> AF(transmitUAVLocation_i))
#AG(forall i : UAVPropertiesUpdated_i -> AF(transmitUAVProperties_i))
#AG(forall i: executingFlightPlanUAV_i)
#AG(forall i: supportedMapLayerType_i)
#AG(forall i: inputAddresses_i -> AF(optimizedRoute_i))
#AG(forall i: inputAddresses_i -> AF(optimizedRoute_i & forall j: fixedPath(i, j) -> AF(fixedPathInOptimizedRoute(i, j))))
AG(fastInternetConnection -> AF(increasedPerformance))
AG(userRequest -> AF(loadNewMaps))
AG(installed -> AF(loginPrompt))
AG(successfulLogin -> EF(selectSpring2013 | selectWinter2013))
#AG((selectSpring2013 | selectWinter2013) -> EF(forall i: ListedCategory_i))
AG(selectCategory_i -> EF(thumbnailImagesAppear_i))
AG(selectProduct_i -> EF(viewProductDetails_i))
#AG(viewProductDetails_i -> EF(forall j: detailFeatureAvailable(j, i)))
AG(viewProductDetails_i -> EF(callRepForOrder_i | proceedToOnlineCheckout_i))
AG(loggedIn -> (AF(catalogueSelected) | AF(searchFunctionUsed)))
AG(searchIconSelected -> AF(searchByProductID & searchByKeyword))
AG(successfulQuery -> AF(searchResultsDisplayed))
AG(!successfulQuery -> AF(errorMessageDisplayed))
AG(selectedProduct -> EF(productDetails))
AG(successfulLogin -> EF(selectCatalogue) | EF(search) | EF(subNavigation))
AG(selectDownloadPDF -> AF(viewPDFonDevice))
AG(selectVideos -> AF(display360VideoList))
AG(selectVideoFromList -> AF(playVideoOnDevice))
AG(userPerformsZoomGesture -> AF(imageZoomedIn))
AG(userSwipesLeftToRight -> AF(nextProductViewed))
AG(backButtonPressed -> AF(returnToCategoryPage))
AG(userSearches -> AF(searchByKeyword) | AF(searchByProductID))
AG(userNavigates -> AF(accessCataloguePDF) & AF(access360Videos) & AF(contactRep))
AG(minimalLogic -> EF(littleComputationIssues | !computationIssues))
AG(usingDeviceWhileDriving -> EF(hazard))
AG(loginAttempt -> AF(linkedWithInternalSystem))
AG(secureInformation)
A(!necessaryFieldsFilled W (necessaryFieldsFilled & AF(activationMailSent)))
A(!accountActivated W (accountActivated & AF(userLoggedIn)))
AF(enteredUsernamePassword & AF(userLoggedIn))
AG(Logout -> AF(userLoggedOut))
AG(userLoggedOut -> A(!userUsingSystem W userLoggedIn))
AG(userSearching -> AF(searchByPrice | searchByLocation | searchByCategory))
AG(userBrowsingProfiles -> AF(viewUsername & viewProfilePhoto & viewUserItems))
AG(userBrowsingCategories -> AF(viewItemCount_i))
AG(userBrowsingItems -> AF (viewItemPictures & viewItemPrices & viewOtherFeatures))
AG((usernameChanged | passwordChanged) -> AF(notificationEmailSent))
AG(emailLinkClicked -> A(!changesApplied W emailLinkClicked))
AF(buyCredits & (useCreditCard | usePayPal))
AF(AddToCart & itemAddedToCart)
AG(itemAvailableForExchange -> AF(requestExchange))
AG(exchangeOffered -> AF(approveExchange))
AG(exchangeOffered -> AF(declineExchange))
AG(shipmentStarts -> AF(notifyOtherUsers))
AG(userAddingItem -> AF(itemCount == itemCount_1))
EF(setPrice) & EF(setAmount) & EF(uploadPictures) & EF(addDetails)
AG(editItem -> EF(addPictures | removePictures) & EF(changePrice) & EF(changeDetails))
AG(wishesToRemove -> AF(removeItem))
AF(deleteProfile)
AG(deleteProfile -> AF(!useSystemWithOldDetails))
AG(markFavorite -> AF(itemChanged & notifyUser))
AF(tradedWith & (rateUser | commentUser))
AG((searchInitiated) -> AF(searchbySiteName | searchbyDescription))
AG(autoSuggestEnabled)
AG(searchInProgress -> AF(resultsDescending))
AG(!ResultsFound -> AF(displayNoResultsMessage))
AG(!ResultsFound -> AF(displayLinkBackToHome))
AF(geoLocationFeatureAvailable -> AF(findUser))
AG(geoLocationScriptEnabled -> AF(locateUser))
AG(userWithinOneMileOfCampus)
AG(userWithinOneMileOfCampus -> AF(updateLocation))
AF(requestLocationPermission)
AG(denyLocationPermission -> AF(promptHomeScreen))
AG(allowLocationPermission -> AF(createUser))
AG(unableToUpdateLocation -> AF(showFailureMsg & returnToHomePage))
AF(displayNearbySitesLink)
AG(ajaxRequest -> AF(updateHomePage))
AG(requestNearestSites -> AF(displaySortedNearestSitesByName))
AG(requestSites -> AF(displaySitesOnMap)) & AG(displaySitesOnMap -> (name & description & linkToSitePage))
AG(requestDistanceCalculation -> AF(completeDistanceCalculation))
AG(userClicksBrowseSites -> AF(displaySortedSiteList))
AG(collectListOfAllSites & SortedByName)
AG(buildURLForEachSitePage)
AG(clickMapLink -> AF(displayCampusMapWithSites))
AG(historicalSiteExists -> AF(markerWithInfoOnMap))
AG(sitePageExists -> AF(containsWalkingDirectionsLink))
AG(siteExists -> AF(displayThumbnails & OrderedByYear))
AG(!imageAvailable -> AF(displayNoImageFlag))
AG(clickThumbnail -> AF(displayMediumSizedImage))
AG(clickThumbnail -> AF(replaceSiteDescription))
AG(ClickMainImage -> AF(displayEnlargedImage))
AG(ClickWalkingTourLink -> AF(displayWalkingTourPage))
AG(ClickAboutLink -> AF(displayAboutPage))
AG(!personalDataStored)
AG(nightlyCronJobRuns -> AF(userLocationDataDeleted))
AG(adminUsesInterface -> AF(adminAuthorized))
AG(adminAuthorized -> AF(textElementsChanged))
AG(languageSelected -> AF(inMainApp))
AG(defaultLanguage == English)
AG(mainMenu -> AF(MapLauncher & (mapAppVersion ==tre1tre)))
AG(mainMenu -> AF(NewsLauncher & (newsAppVersion ==tre1treffve)))
AG(mainMenu -> AF(AgendaLauncher & (agendaAppVersion == tre1tre5)))
AG(mainMenu -> AF(FacebookLauncher & (facebookAppVersion == tre1trefe)))
AG(mainMenu -> AF(TwitterLauncher & (twitterAppVersion == tre1trfe)))
AG(mainMenu -> AF(EmployeeFinderLauncher & (employeeFinderAppVersion == tre1tree)))
AG((language == Dutch) -> AF(mainMenu -> (EncyclopediaLauncher & (encyclopediaAppVersion == tre1nove))))
AG((language == Dutch) -> AF(mainMenu -> (StudentHandbookLauncher & (studentHandbookAppVersion ==tre1otto))))
AG(mainMenu -> EF(likeInsApption))
AG(mainMenu -> EF(tweetInsApption))
AF(TwitterSettingsLink)
AF(FacebookSettingsLink)
AG(TwitterSettingsMenu -> AF(SaveTwitterUsernameAndPassword))
AG(FacebookSettingsMenu -> AF(SaveFacebookUsernameAndPassword))
AG(TwitterSettingsMenu -> AF(DeleteTwitterUsernameAndPassword))
AG(FacebookSettingsMenu -> AF(DeleteFacebookUsernameAndPassword))
AF(searchBuildingByName)
AF(searchBuildingByAddress)
AF(searchPOIByName)
AG((searchByName | searchByAddress) -> AF(displayedSet))
AG(searchPOIByName -> AF(displayedPOISet))
AF((searchBuildingByName | searchBuildingByAddress | searchPOIByName) & viewElementOnMap)
AF(navigateBetweenBuildings)
AF(navigateBuildingToPOI)
AF(navigatePOITOBuilding)
AF(navigateBetweenPOI)
AF(navigatePOIToLocation)
AF(navigateStreetToLocation)
#AG(exists i, j: i != j & transport = Ti & EF (transport = Tj))
AF(searchFromLocationByBuildingName)
AF(searchFromLocationByBuildingAddress)
AF(searchFromLocationByPOIName)
AG(searchResult -> AF(fromLocationSelected))
AF(mapFromLocationSelected)
AF(searchToLocationByBuildingName)
AF(searchToLocationByBuildingAddress)
AF(searchToLocationByPOIName)
AG(searchResult -> AF(toLocationSelected))
AF(mapToLocationSelected)
AG(routePlanned -> AF(routeShownInMapView))
AG(mapView -> stylisticStyle)
AG(mapView -> satelliteStyle)
AF((stylisticView & EF(satelliteView)) | (satelliteView & EF(stylisticView)))
AG(mapView -> AF(zoom))
AG(mapView -> AF(pan))
AG(mapView -> currentLocation)
AG(buildingView -> POIsIndicated)
EF(currentLocation & tweetCurrentLocation)
EF(currentLocation & changeFacebookStatus)
AG(administrator -> AF(changeStylisticMap))
AG(administrator -> AF(addBuildings))
AG(administrator -> AF(removeBuildings))
AG(administrator -> AF(addPathVertices))
AG(administrator -> AF(removePathVertices))
AG(administrator -> AF(removePathEdges))
AG(administrator -> AF(addPathEdges))
AG(administrator -> AF(addPOI_BFR))
AG(administrator -> AF(removePOI_BFR))
AG(administrator -> AF(linkPOI_BFRP))
AG(administrator -> AF(unlinkPOI_BFRP))
AG(titleScreen -> AF(showNewsTitles_RSS))
AG(newsTitles -> AF(showFirstLines))
AG(chooseNewsTitle_i -> AF(showFullNewsReport_i))
AF(likeNewsItem)
AF(tweetNewsItem)
AG(administrator -> AF(modifyEnglishRSSFeeds))
AG(administrator -> AF(modifyDutchRSSFeeds))
AG(appStart -> AF(showUpcomingEvents))
AF(calendarView)
AF(openCalendarView)
AF(closeCalendarView)
AG(calendarView -> AF(changeMonth))
AG(calendarView -> AF(eventDayVisible))
AG(calendarView -> AF(currentDayIndicated))
AG(calendarView & daySelected -> AF(eventsShown))
AF(searchEventsByDate)
AF(searchEventsBySubject)
AG((searchEventsByDate | searchEventsBySubject) -> AF(matchingEventsDisplayed))
AF(likeEvent)
AF(tweetEvent)
AG(agendaApp -> AF(selectedLanguage & eventsFromRSSFeeds))
AG(administrator -> AF(modifyEnglishRSSFeeds))
AG(administrator -> AF(modifyDutchRSSFeeds))
AG(agendaAppStarted -> AF(upcomingEventsShown))
AF(searchPersonByName)
AF(searchPersonByDepartment)
AG((searchPersonByName | searchPersonByDepartment) -> AF(employeesDisplayed))
AG(employeeSearchResultSet -> AF(viewPersonalInfo_i))
AF(showEmployeeOfficeLocationOnMap_i)
AF(planRouteToEmployeeOffice_i)
AG(encyclopediaAppStarted -> AF(mostSearchedItemsDisplayed))
AG(encyclopediaAppStarted -> AF(mostRecentItemsDisplayed))
AF(searchBookByWord | searchBookByPhrase)
AG((searchByWord | searchByPhrase) -> AF(displayedTopics))
AF(selectTopic)
AG(clickTopic -> AF(showFullText))
AF(likeTopic)
AF(tweetTopic)
AG(handbookAppStarted -> AF(mostSearchedItemsDisplayed))
AG(facebookAppStarted -> AF(TUEFacebookPageDisplayed))
AF(selectTUEFacebookSite)
AG(administrator -> AF(modifyTUEFacebookSiteList))
AG(twitterAppStarted -> AF(TUeTwitterPageShown))
AF(selectTUeTwitterSite)
AG(administrator -> AF(modifyTUETwitterSiteList))
AF(downloadMobileApp)
AG(freeDownload)
AG(newVersionReleased -> AF(userChecksManually))
AG(newReleaseAvailable -> AF(downloadThroughPhone))
AG(downloadedApp -> AF(registerWithApp & provideUsername & providePassword & provideEmail & (providePhoneNumber | !providePhoneNumber)))
AG(registered -> AF(logInToApp))
AG(logInInfoStored -> AF(autoLogIn))
AG(userRegistered -> AF(retrievePasswordByEmail))
AG(userLoggedIn -> AF(showSearchPage))
AF(performSearchByPrice) & AF(performSearchByDestination) & AF(performSearchByRestaurantType) & AF(performSearchBySpecificDish) & AF(performFreeTextSearch)
AF(selectMultipleSearchOptions)
AF(viewSearchResultsOnMap)
AG(userPosition -> AF(relevantRestaurants & closestRestaurants))
AG(pin_i -> AF(restaurant_j)) & (i == j)
AG(pin_i -> infoLink_i)
AG(resultsDisplayed_n -> (n >= 0 & n <= 100))
AG(mapView -> defaultZoom)
AG(mapView -> (button & (buttonSelected -> AF(filterMenuDisplayed))))
AG(searchResults -> AF(listView))
AG(listElement_i -> AF(specificRestaurant_j)) & (i == j)
AG(element_i -> (AF(restaurantName_i) & AF(telephoneNumber_i) & AF(typeOfFood_i) & AF(distanceToUser_i) & AF(averagePrice_i) & AF(shortDescription_i) & AF(webPageLink_i) & AF(informationLink_i)))
AG(moreRestaurantsThanDisplayable -> scrollable)
AG(searchByPrice -> AF(priceSorted & distanceSorted & typeSorted & dishSorted))
AG((!searchByPrice & searchOption) -> AF(distanceSorted & priceSorted & typeSorted & dishSorted))
AG(listView -> AF(header & sortingOptions))
AG(listView -> (button & (buttonSelected -> AF(filterMenuDisplayed))))
AF(pinSelected | listElementSelected)
AG((pinSelected | listElementSelected) -> AF(restaurantLocationSentToGPS))
AF(userNavigatedToDestination)
AG(destinationReached -> AF(backToSearchPage))
AG(searchOption -> AF(switchToMapView) & AF(switchToListView))
AG(resultItem -> AF(informationLinkSelected))
AG(selectInformationLink -> AF(informationPageDisplayed))
AG(inputPriceRange -> AF(listViewDisplayed))
AG(inputDistanceRange -> AF(distanceFilteredResults))
AG(minDistance == 0 & maxDistance == 10)
AG((higherMaxDistRequested -> AF(higherMaxDistAllowed))) &  AG((lowerMaxDistRequested -> AF(lowerMaxDistAllowed))) & AG((higherMinDistRequested -> AF(higherMinDistAllowed)))
AG(defaultDisplay -> AF(mapView))
AG(searchByPrice -> AF(isInteger_priceInput)) & AG(searchByDestination -> AF(isInteger_destinationInput))
AG(invalidInput -> AF(userInformed & promptAcceptedInput))
AG(selectRestaurantType -> EF(restaurantTypeSelected)) & AG(restaurantTypeSelected -> mapViewDisplayed)
AG(selectSpecificDish -> EF(specificDishSelected)) & AG(specificDishSelected -> mapViewDisplayed)
AG(searchByFreeText -> AF(searchByRestaurantName | searchByRestaurantDescription | searchByRestaurantAddress | searchByRestaurantType | searchByRestaurantMenu))
AG(noMatch -> AF(userInformed & stayOnSearchPage))
AG(viewingList -> AF(sortByPrice | sortByDistance | sortByType | sortByDish | sortByName))
AG((sortByRestaurantName | sortByDishName | sortByRestaurantType) -> AF(alphabeticalOrder))
AG(sortByPrice -> AF(sortedCheapestToMostExpensive))
AG(sortByDistance -> AF(sortedClosestToFurthest))
AG(sortButtonClicked -> AF(orderReversedDescending))
AG(sortButtonClicked -> AF(orderReversed))
AG((listView | mapView) -> AF(filteringMenuAvailable))
AG(filteringOptions -> AF((increaseMaxDistance | decreaseMaxDistance) & (increaseMaxPrice | decreaseMaxPrice) & (chooseRestaurantType | chooseSpecificDish)))
AG(mobileApp -> AF(userProfilePage))
AG(userProfilePage -> AF(editPassword & editEmail & editPhoneNumber))
AG(userProfilePage -> AF(selectLanguage))
AF(noAccount & EF(register))
AG(registrationInfoProvided -> AF(applyForVerification))
AG((appliedForVerification -> AF(confirmationEmailReceived)) & (confirmationEmailReceived -> AF(ableToLogin)))
AG(wantsToLogIn -> AF(logsInWithAccount & AF(AF(loggedInAsOwner))))
AG((wantsToLogIn & lostPassword) -> AF(enterEmail & submitForm -> AF(receiveEmailWithPassword)))
AG((loggedIn & wantsToManageInfo) -> EF(manageInfoInForm))
AG((wantsToFillMandatoryFields & provideAvgPrice & provideAddress & provideEmail & providePhone & provideRestaurantName) -> AF(filledMandatoryFields))
AG((wantsToFillOptionalFields & provideDescription & provideMenu & provideType & providePicture & provideMobilePhone) -> AF(filledOptionalFields))
AG((wantsToFillMenuField & provideDishName & provideDishDescription & provideDishPrice) -> AF(filledMenuField))
AG((filledMandatoryFields & submitForm) -> AF(informationAdded))
AG(((filledMandatoryFields & filledOptionalFields) & submitForm) -> AF(informationAdded))
AG((loggedIn & informationExists & deleteInformation) -> AF(informationDeleted))
AG((loggedIn & informationExists & editInformation) -> AF(informationEdited))
AG((wantSelectLanguage & selectEnglish) -> AF(webPortalLanguage == English))
AG((wantSelectLanguage & selectSwedish) -> AF(webPortalLanguage == Swedich))
AG((wantSelectLanguage & selectFrench) -> AF(webPortalLanguage == French))
AG((wantSelectLanguage & selectSpanich) -> AF(webPortalLanguage == Spanich))
AG(adminLogin -> AF(loggedInAsAdmin))
AG((adminLoggedIn & verifyRestaurantOwner) -> (AF(restaurantOwnerCanLogIn) & AF(receiveConfirmationEmail)))
AG((adminLoggedIn & rejectRestaurantOwner) -> (AF(!restaurantOwnerCanLogIn) & AF(receiveRejectionEmail)))
AG((adminLoggedIn & createNewRestaurantType) -> AF(newRestaurantTypeAdded))
AG((adminLoggedIn & editRestaurantType) -> AF(restaurantTypeUpdated))
AG((adminLoggedIn & deleteRestaurantType) -> AF(restaurantTypeRemoved))
AG((adminLoggedIn & createNewDish) -> AF(newDishAdded))
AG((adminLoggedIn & editDish) -> AF(dishUpdated))
AG((adminLoggedIn & deleteDish) -> AF(dishRemoved))
AG((adminLoggedIn & addRestaurantInfo) -> AF(restaurantInfoAdded))
AG((adminLoggedIn & restaurantInfoExists & deleteRestaurantInfo) -> AF(restaurantInfoDeleted))
AG((adminLoggedIn & editRestaurantInfo) -> AF(restaurantInfoEdited))
AG((adminLoggedIn & editExistingUser) -> AF(userInfoUpdated))
AG((adminLoggedIn & deleteExistingUser) -> AF(userInfoDeleted))
AG((adminLoggedIn & createNewRestaurantOwner) -> AF(newRestaurantOwnerAdded))
AG((adminLoggedIn & editRestaurantOwner) -> AF(restaurantOwnerUpdated))
AG((adminLoggedIn & deleteRestaurantOwner) -> AF(restaurantOwnerDeleted & AF(restaurantInfoDeleted)))
AG((adminWantSelectLanguage & adminSelectEnglish) -> AF(webPortalLanguage== English))
AG((adminWantSelectLanguage & adminSelectSwedich) -> AF(webPortalLanguage== Swedich))
AG((adminWantSelectLanguage & adminSelectFrench)-> AF(webPortalLanguage== French))
AG((adminWantSelectLanguage & adminSelectSpanish) -> AF(webPortalLanguage== Spanish))
AG(filledFields -> AF(activationMailSent))
AG(accountActivated -> AF(userLoggedIn))
AG((enterUsername | enterEmail) & enterPassword -> AF(loggedIn))
AG(logoutButtonPressed -> AF(loggedOut))
AG(loggedOut -> A(!usingSystem U loggedIn))
AG(userSearching -> AF(searchByPrice | searchByLocation | searchByCategory))
AG(browseProfiles -> AF(viewUsernames) & AF(viewProfilePhotos) & AF(viewUsersItems))
AG(browseCategories -> AF(viewCategories) & AF(viewCategoryItemCount))
AG(userBrowsingItems -> AF(viewItemPictures & viewItemPrices & viewOtherFeatures))
AF(changeUsername) & AF(changeEmail) & AF(changeProfilePicture) & AF(changePassword)
AG((changeUsername | changePassword) -> AF(notificationMailSent))
AG(emailLinkClicked -> AF(changesApplied))
EF(buyCredits)
EF(useCreditCard | usePayPal)
EF(touchAddToCart -> AF(itemAddedToCart))
AG(itemsAddedToCart -> AF(itemsAvailableForCredits & buyItemsWithCredits))
AG((itemWantedAvailableForExchange & userHasItemsForExchange) -> AF(exchangeRequest))
AG(exchangeOffered -> AF(approveExchange))
AG(exchangeOffered -> AF(declineExchange))
AF(startShipmentNotification)
AG(addItem_i -> EF(setPrice_i | setAmount_i | uploadPictures_i | addDetails_i))
AG(itemAdded_i -> (addPicture_i | removePicture_i | changePrice_i | changeDetails_i))
AG(userWishesToRemove_i -> AF(removeItem_i))
AG(userWishesToDeleteProfile -> AF(deleteProfile))
AG(deleteProfile -> AF(!accessWithOldAccountDetails))
AG(markAsFavorite_i -> (AF(changeToItem_i) -> AF(userNotified)))
AG(tradeWithUser_j -> AF(rateUser_j & commentUser_j))
AF(registerComplaint)
AG(registerComplaint -> AF(takeComplaintForward))
AG(complaintInitiated -> AF(investigationInitiated))
AG(registration -> AF(investigationModuleCCTNS & investigationProcess))
AG(prosecutingCases -> AF (interfacingWithCourts))
AG(designatedCon -> AF (interfacesWithCourts))
AG(interfacesWithCourts -> AF(prosecutionModuleCCTNS & recordCourtInteractions))
AG(searchModuleCCTNS -> AF(basicSearch | advancedSearch))
AG((basicSearch | advancedSearch) -> AF(searchPerson & searchCrimeType & searchModusOperandi & searchProperty))
AG((basicSearch | advancedSearch) -> AF(viewByCriminalAccused | viewByCases))
AG(reporting -> AF(monthlyReporting | RTIRelated))
AG(citizenInterface -> AF(informationExchange))
AG(citizens -> AF(getInformation | getAcknowledgements))
AG(police -> AF(quickResponse))
AG(roleBasedLandingPages -> AF(navigateCCTNS & displayInfo))
AG(contextSensitiveHelp -> AF(allActionsScenarios & allUserInterfaces))
AG(logDefectsEnhancements -> AF(trackDefectsEnhancements))
AG(userChoosesAlerts & actionPerformed -> AF(sendAlerts))
A(!trackRequest W (submitRequest & AF(trackRequest)))
EF(viewCategoryWise) & EF(viewStatusWise) & EF(viewAgeWise)
AG(accessibleWithinApp) & AG(accessibleOutsideApp)
AG(auditTrailActivated -> AF(trackEventsAutomatically & storeInfoInAuditTrail))
AG(caseLife -> AF (maintainAuditTrail))
AG((auditTrailAvailable & specificEventIdentified & relatedDataAccessible) -> AF(authorisedExternalPersonnel))
AG(exportAuditTrails -> AF(!auditTrailAffected & externalAuditorsExamine))
AG(captureViolations -> AF(storeViolations & (accessDenied | attemptedViolations)))
AG(minimumReports -> AF(reportByCase & reportByUser & reportChronologically))
AG(provideReports -> AF(reportByWorkstation | reportByNetworkAddress))
AG(limitAccess -> AF(accessBySpecifiedUsers | accessByUserGroups))
AG(roleBasedControl)
#Exists i, j : AG(userBelongsToGroup_i & userBelongsToGroup_j & (i != j))
AG((setUpUserProfile | allocateUserToGroup) -> adminUser)
AG(userStipulatesAccess -> EF(canAccessCase))
AG((changeSecurityAttributes & !superUser) -> AF(!canChangeAttributes))
AG((userRequestAccess & noAccessRight) -> AF((displayTitleMetadata & !displayCaseExistence & !CaseInformation) | (!displayTitleMetadata & displayCaseExistence & !CaseInformation) | (!displayTitleMetadata & !displayCaseExistence & CaseInformation)))
AG(userPerformsSearch -> AF(noAccessRight -> (!recordIncluded)))
AG(unauthorizedAccessAttempt -> AF(logInAuditTrail))
AG((caseAccess | caseActivity) -> AF(storeInAuditTrail))
AG(displayCases & displaySuspects)
AG(persistentDefaults -> AF(userDefinableValues | sameAsPreviousItem | contextDerivedValues))
AG(frequentTransactions -> AF(smallInteractions))
AG(nonTextMedia -> AF(textEquivalent))
AG(downtime <= 2)
AG((userUnablePerformFunction & !workstationFailure) -> AF(systemDown))
AG(unplannedDowntime <= 1)
AG(numUnplannedIncidents <= 50)
AG((softwareFailure | hardwareFailure) -> AF(restoreSystemWithin2Hours))
AG((standardConditions | peakConditions) -> AF(adequateResponseTime))
AG((searchSimple -> (responseTime >= 5 & responseTime <= 8)) & (searchAdvanced -> (responseTime >= 10 & responseTime <= 15)))
AG(retrieveAndDisplayTime >= 5 & retrieveAndDisplayTime <= 8 & accessWithin2Months -> AG(caseAccessed))
AG(!accessedInLast2Months -> (retrieveAndDisplayTime <= 20))
AG(multilingualInterface)
AG((equipmentFailure | communicationNetworkFailure) -> AF(!dataLoss))
AG(offlineMode -> AF(criticalFunctionalityAvailable))
AG(lowBandwidth -> AF(satisfactoryPerformance))
AG(USBPluggedIn -> AF(deployedTime <= 1 & operationalTime<=1))
AG(concurrentCustomers <= 1000)
AG(retrieveProductsPerSecond >= 200)
AG(requestAddProduct -> AF(addProductTime < 2))
AG(requestSearchProduct -> AF(searchProductTime < 1))
AG(emailingCustomer -> AF(emailingCustomerTime < 1))
AG(requestCreditCardValidation -> AF(validateCreditCardTime < 2))
AG(requestShippingCharges -> AF(acquireShippingChargesTime < 2))
AG(restoreRecordsPerSecond >= 1000)
AG(liveInternetConnection -> AF(periodicBackup))
AG(creditCardUsed -> AF(fraudValidation))
AG(sensitiveInfoTransmitted -> AF(httpsEncryption))
AG(customerDataStored -> AF(dataEncryption))
AG(IPDOSAttackDetected -> AF(IPBlocked))
AF(consecutiveFailedLoginAttempts)
AG(ProtectedByFirestarter)
AG(login -> AF(validateCreditCard))
AG(tooLarge -> AF(compressImage))
AG(requestPage -> AF(startAsyncLoad))
AG(enterEmail -> AF(validateEmailExistence))
AG((change | update | fix) -> AF(logAction))
AF(debugMode)
AF(testTransaction)
AF(testShipping)
AF(testEnvironment)
AG(hardwarePatch)
AG((observingLevel & !maintenanceLevel & !testLevel) | (!observingLevel & maintenanceLevel & !testLevel) | (!observingLevel & !maintenanceLevel & testLevel))
AG(THEMASsystem -> AF(heatingControlled) & AF(coolingControlled))
AG(initFileRead -> AF(definitionsDerived))
AG(initFileRead -> AF(unitsDetermined))
AG(uniqueID_i)
AG(thermostatData_floor_quadrant)
AG(initFileContainsID_thermostatID -> AF(IDLoaded_thermostatID))
AG(maxUnitsOn_n -> AG(concurrentUnitsOn_t_n1 -> (n1 <= n)))
AG(maxUnitsOn_n -> AF(maxUnitsFromInitFile_n))
AG(maxUnitsFromInitFile_n -> AF(maxUnitsStoredInSystem_n))
AG((currentTemperature > triggerValue) -> EF(turnOnHeatingUnit | turnOnCoolingUnit)) & AG((currentTemperature < triggerValue) -> EF(turnOffHeatingUnit | turnOffCoolingUnit))
AG(initializationFile -> AF(establishTriggerValues))
AG(thermostat_i -> AG(temperaturet_t_1 <= maxDeviation))
AG(initializationFile -> AF(overtemperatureValue))
AG(temperature -> AF(isReasonableTemperature))
AG(readInitFile -> AF(establishTemperatureRange))
AG(initialized -> AF(turnOffUnits & EF(checkThermostats & EF(determineUnitsOn))))
AG(temperatureFromThermostat -> AF(isWithinValidRange))
AG(thermostatData -> AF(temperatureSetting) & AF(currentTemperature))
AG(temperatureFromThermostat -> AF(comparedToValidRange))
AG((temperature < lowerValidRange | temperature > upperValidRange) -> AF(invalidTemperatureStatus))
AG(validTemperatureStatus)
AG((receivedTemperature >= lowerValidRange) & (receivedTemperature <= upperValidRange))
AG((receivedTemperature < lowerValidRange | receivedTemperature > upperValidRange) -> AF(invalidTemperatureStatus))
AG(temperatureSettingReceived -> AF(realizeTemperatureSetting))
AG((reportedTemperature > overtemperatureLimit) | (changedTemperatureSetting > overtemperatureLimit) -> AF(detectOvertemperature))
AG(((reportedTemperature > overtemperatureLimit) -> AF (reportOvertemperature)) & ((reportedTemperature <= overtemperatureLimit) -> AF(outputForProcessing)))
AG((reportedTemperature > temperatureSetting) -> AF(detectTemperatureLimitExceeded))
AG((currentTemperature > temperatureSetting_predefinedAmount) -> AF(activateHeatingUnits | activateCoolingUnits))
AG((settingsSatisfied & temperatureRequiresHeatingOrCooling) -> AF(turnOnHeatingOrCoolingUnit))
#forall i: AG(controlCoolingUnit_i & controlHeatingUnit_i ) 
AG(numberOfActiveUnits <= maxSimultaneousUnits)
AG(EF(unitStatus_i == ON) | EF(unitStatus_i == OFF))
AG(requestOn_i -> ((runningUnits < maxRunningUnits) & EF(canHonorRequest_i) | (runningUnits >= maxRunningUnits) & EF(addToLIFOQueue_i)))
AG((runningUnits < maxRunningUnits) -> AF(generateRequest_i))
AG(receivedOffRequest_i -> AF(checkQueue))
AG((!isEmptyueue) -> AF(removeOneRequestFromQueue & checkCurrentState))
AG((thermostatNeedsHeatingOrCooling) -> AF(submitRequestToTurnOnUnit))
AG((requestDenied) -> AF(generateEvent & AF(recordEvent)))
AG(requestDenied -> EF(systemEvent & eventType & thermostatRequest & unitDesignation))
AG(controlHeatingUnits & controlCoolingUnits)
AG((requestTurnOn | requestTurnOff) -> AF(generateRequest & (designationHeatingUnit | designationCoolingUnit) & (turnOnFlag | turnOffFlag)))
AG((requestTurnOn | requestTurnOff) -> AF(provideControlSignal & indicateUnitStatus))
AG(provideControlSignal -> AF(outputUnitStatus))
AG(changeUnitStatus -> EF(generateEvent & unitIdentification))
AG((invalidTemperature | temperatureExceedsLimits) -> EF(generateAlarmEvent))
AG(requestAlarm -> AF(requestInvalidTemperatureAlarm | requestExceededLimitsAlarm))
AG((invalidTemperature & !alarmReset) -> (beep500Hz &  EF(beep700Hz) | beep700Hz &  EF(beep500Hz)))
AG(temperatureExceedsLimits -> ((beep1000Hz & !beep1500Hz) | ( EF(beep1500Hz & !beep1000Hz))))
AG(alarmRequested -> EF(alarmEvent & alarmRecorded))
AG(eventGenerated -> AF(eventIdentified & dataGenerated))
AG(eventOccurs -> AF(eventTypeIdentified & eventMessageFormatted))
AG(eventOccurred -> AF(eventDescriptionRecorded & eventTimeRecorded))
AG(supervisorRequest -> AF(temperatureSettingChanged))
AG(supervisorInterface -> AF(thermostatsDisplayed))
AG(supervisorInterface -> AF(thermostatSelected) & AF(validTemperatureSelected))
AG(supervisorInterface -> AF(operationalHistoryReport | statisticalSummaryReport))
AG(supervisorInterface -> AF(operationalHistoryReport | statisticalSummaryReport))
AG(operationalHistoryReportSelected -> AF(eventsSelected & eventsSorted & asciiReportCreated))
AG(statisticalReportSelected -> AF(availableMonthsPresented))
AG(monthSelected -> AF(asciiReportGenerated))
AG((controlPredator & controlOutrider) -> AF(singleControlSystem & standardHardwareSoftware & supportedInterfaces))
AG((commandControlPayload & commandControlAV & commandControlDataLink & commandControlSupportEquipment) -> AF(tacticalUAVMissions))
AF(interfaceWithExternal & exportDisseminatePayloadData)
AG(level1Interaction | level2Interaction | level3Interaction | level4Interaction | level5Interaction)
AF(secondaryImageryReceipt & secondaryDataReceipt & secondaryImageryTransmission & secondaryDataTransmission)
AF(directImageryReceipt & directDataReceipt)
AF(payloadControl & directImageryReceipt & directDataReceipt)
AF(uavControl & level3Functions)
AF(fullUAVControl)
AF(startup) & AF(operation) & AF(shutdown)
AG((startup & !operation & !shutdown) | (!startup & operation & !shutdown) | (!startup & !operation & shutdown))
AG(powerApplied -> AF(startupState))
AG(startupState -> AF(normalStartupMode | recoveryStartupMode))
AG(haltedTCS -> AF(executedStartupMode))
AG(terminatedNormallyTCS -> AF(normalStartupMode))
AG((powerInterruption | abnormalTermination) -> AF(recoveryStartupMode))
AG(startup -> AF(determineLevels))
AG(higherInteraction -> AF(Prohibited))
AG(attemptProhibitedFunction -> AF(informOperator))
AG((NormalStartup & PowerSupplied) -> AF(OperationsState))
AG(initializeHWCIs -> AF(startHWCIs & AF(AF(downloadSoftware & AF(AF(startCSCIs & AF(AF(executeStartupFD & AF(AF(establishReadiness))))))))))
AG(recoveryStartupMode -> AF (operationsState))
AG(recoveryTCS_HWCIs -> AF(startupHWCIs & AF(AF(downloadSoftware & AF(AF(startupCSCIs & AF(AF(establishReadiness))))))))
AG(TCSOperating -> AF(recordSystemStateData & recordInterfaceCommunications & recordOtherInfo))
AG(abnormalTermination -> AF(promptResumeSameModesData | promptResumeReviewModifyData | promptCommandShutdownStartup))
AG(operationsState -> (normalOperationsMode | trainingOperationsMode | maintenanceOperationsMode))
AG(!(normalOperationsMode & trainingOperationsMode) & !(normalOperationsMode & maintenanceOperationsMode) & !(trainingOperationsMode & maintenanceOperationsMode))
AG((normalOperationsMode | trainingOperationsMode | maintenanceOperationsMode) -> AF(shutdownState))
AG((normalOperationsMode | trainingOperationsMode) -> AF(executeFD_L & determineLevelOfInteraction))
AG(normalOperationsMode -> AF(missionPlanning & missionControlMonitoring & payloadProductManagement & targetCoordinateDevelopment & c4iSystemsInterface))
AG(normalOperationsMode -> AF(missionPlanning & missionControlMonitoring & payloadProductManagement & targetCoordinateDevelopment & c4iSystemsInterface & levelsOfInteraction))
AG(trainingOperationsMode -> AF(missionPlanning & missionControlMonitoring & payloadProductManagement & targetCoordinateDevelopment & c4iSystemsInterface))
AG(trainingOperationsMode -> AF(missionPlanning & missionControlMonitoring & payloadProductManagement & targetCoordinateDevelopment & c4iSystemsInterface & levelsOfInteraction))
AG((maintenanceOperationsMode & HCIRequired) -> AF(AVMaintenance & payloadMaintenance & dataLinkTerminalMaintenance & workstationPeripheralMaintenance & FD_L & softwareUpgrades & softwareDebugMonitoring))
AG(shutdownCommand -> EF(ShutdownState & AF((!impactOperations & !damageSystem) & restartSystem)))
AG(ShutdownState -> AF(storageDeletionMissionData & shutdownFunctions & shutdownHCIs & terminationInterfaces))
AG(ShutdownState -> AF(noOperationModes))
AG(TCS -> EF(missionPlanning & missionControlMonitoring & payloadProductManagement & targeting & C4IInterface))
AG(TCS -> EF(operatorGenerateUAVMissionPlan))
AF(receiveMissionPlans & processMissionPlans)
AG(TCS_MissionPlan -> AF(interoperableWithTAMPS & interoperableWithAMPS & interoperableWithAFMSS))
AF(transmitMissionPlans)
AF(receiveViaC4I & automatedProcessing)
AF(receiveFromTCSs) & AF(processFromTCSs)
AF(transmitToTCSs)
AG(missionPlan -> EF(flightRoutePlan) & EF(payloadPlan) & EF(communicationsPlan))
AG(storedMissionPlans >= 500) & AG(uniqueMissionPlanNames) & AG(laterRetrieval)
AG(guiAvailable -> AF(defineWaypointsAbility & mapBasedDisplay & pointingDevice & keysetRedundancy))
AG(twoPositionsSelected -> EF(computeRangeBearing))
AG(EF(importOverlay) & EF(createOverlay) & EF(modifyOverlay))
AG(analysisCompletion -> AF(useUAVdb & AF(AF(displaySignatureThreat))))
AG(operationMissionExecution -> AF(dynamicMissionRetasking & payloadRetasking))
AG(enterParameters -> AF(reviewParameters & flightParameters & payloadParameters & dataLinkParameters & vcrParameters & loiterPatterns))
AG(enterConfig -> AF(avType & avID & payloadType & controlAuth & dataLinkPreset & tacticalCommPreset & c4iDataPreset))
AG(uploadFlightRoute -> (EF(uploadPayloadPlan) | EG(!uploadPayloadPlan)) & (systemDataLink | directGroundConnection))
AG(retrieveMission -> AF(viewMission & modifyMission & deleteMission & saveMissionDifferentName & futureRetrieve))
AG(uploadMissionPlan -> EF(checkAltitudeConstraints & checkPayloadConstraints & checkDataLinkRangeConstraints & checkAirspaceRestrictions & checkFuelLimitations & checkThreatConstraints & checkDataLinkTerrainMaskingEffects & checkLOLPlan))
AG(missionPlanCheck -> AF(discrepancyFound | successfulCompletion))
AG(validationFault -> AF(operatorAcknowledgesFault & EF(overrideValidationFault)))
AG(operator -> EF(setLOLDelayTimers))
AF(printAlphanumericWaypointData)
AG(TCS & operator -> AF(defineRoute & waypointFormat))
AG(flightRoutePlan -> AF(waypoints_n & (n >= 1 & n <= 500)))
AG(displayMissionWaypoints) & AG(displayFlightPath)
AG(enterWaypointData)
AG(flightRoutePlanner -> AF(weightBalanceDataCalculations & fuelCalculations & terrainAvoidanceWarning & minDataLinkReceptionAltitudeCalculations & payloadSearchAreaInfo & flightCorridorDesignation & restrictedAirSpaceDesignation))
AG(programmedWaypoint -> AF(estimatedTimeOfArrival & fuelStatus))
AG((waypoint | every5Minutes) -> EF(computeFlightRange_remainingFuel))
AG(selectedFlightRoutePlan -> (AF(analyzeFlightRoutePlan & !violateAVconstraints & !violateDatalinkLimitations) -> AF(transmitFlightRoutePlan)))
AG(flightPlanCalculation_simulator <= simulator)
AG(flightRoutePlan -> EF(avCommands & autonomousFlight & EF(recoveryArea)))
AG(TCS -> AF(operator & interactiveGraphics & mapBasedPlanning))
AG(TCS -> AF(createWaypoints & defineFlightPath & defineAVAltitude & defineAVAirspeed))
AG(TCS -> AF(displayOverlays & icons & knownZones & threatSystems & threatEngagementEnvelopes))
AG(deClutterCapability -> AF(displaySignificantThreats))
AG(deClutterSelected -> AF(modifyMaxThreats))
AF(displayWaypointData)
AF(loadMap) & AF(zoomMap) & AF(scrollMap) & AF(printMap) & AF(clearMap)
AF(displayMapScale)
AF(displayLatLon) & AF(displayUTM) & AF(displayMGRS) & AF(convertSpheroidScales)
AF(displayLOSvsDTED)
AF(generatePayloadPlan)
AF(generatePayloadType) & AF(generatePayloadCommands) & AF(generatePayloadModeSettings) & AF(generatePayloadPointingCommands) & AF(generatePayloadFOVSettings)
AG(selectedPayload -> AF(displayPayloadSwath))
AG(missionExecution -> AF(TCSControlAV & TCSMonitorAV & TCSControlPayload & TCSMonitorPayload & TCSControlDatalink & TCSMonitorDatalink & TCSControlC4I & TCSMonitorC4I))
AG(operatorSelectAV -> AF(AVComponentsInitialized))
AG((TCSTransmit -> AF(AVReceive)) & (AVTransmit -> AF(TCSReceive)))
AG((TCSPredatorLevel_i & TCSOutriderLevel_i) &  (i >= 1 & i <= 5))
AG(TCS -> EF(controlMultipleAVs & monitorMultipleAVs))
AG((AVPerformanceOutofLimits) -> AF(notifyOperator))
AG((requestToPassControl) -> AF(passControl)) & AG((requestToReceiveControl) -> AF(receiveControl))
AG(TCSCapability -> AF(controlAVFlightCommands & releaseToAutonomousMode))
AG(AVTelemetryData -> EF(TCSSupportFunctions))
AG(selectedAV -> EF(controlFlight & AVPerformanceCapabilities))
AG(TCS -> EF(controlIFF & displayIFF))
AG(TCS -> EF(enterAirspeedLimit & enterAltitudeLimit & enterFuelLimit))
AG(TCS & operator -> EF(controlAVLOS | controlAVSATCOM))
AG(TCS -> EF(BLOSFlightControlUplinkCommandAV1 & BLOSFlightControlUplinkCommandAV2))
AG(supportAllFlightModes & AF(supportManualControls))
AG(TCS & AVSupportEmergencyPlan -> EF(implementEmergencyActionPlan))
AG(TCS -> EF(interactiveDisplay))
AG(TCS & operatorCommand -> EF(AVFlightCharacteristics))
AG(operatorInitiateCommand -> EF(UAVFlightBehaviorChange & manualOverride))
AG(TCSCapability -> EF(commandToUseInherentNavigationMethods))
AG(operatorInitiateCommand -> EF(UAVNavigationMethod & manualOverride)) & AG(operatorChangeCommand -> EF(UAVNavigationMethod & manualOverride))
AG(TCSFunctionality -> AF(controlADT & monitorADT & displayADTOperation & controlADTAntenna & controlADTTransceiver))
AG(controlADTAntenna & AF(controlAntennaPointingDirection & controlAntennaTransmissionMode))
AG(TCSFunctionality -> AF(controlADTPower & controlADTSignalStrength & controlADTFrequencies))
AG(TCS -> EF(supportAutomaticLaunchSystem & supportAutomaticRecoverySystem))
AG(TCS -> (interoperableWithIBLS & interoperableWithCARS))
AG(launchAndRecoveryRequired -> AF(cuesPresented))
AG(abortRequired -> AF(cuesPresented))
AF(abortRequired -> AF(abortInitiated))
AG(AVHasEmergencyRecovery -> EF(initiateEmergencyRecovery))
AG(monitorTelemetryRealTime)
AG(recordTelemetryForReview)
AG(monitorAVAdherence)
AG(deviationDetected -> AF(moreThan10PercentDeviation))
AG(deviationDetected -> AF(notifyOperator))
AG(monitorSubsystemStatus)
AG(displayAVStatus)
AG(dataLinkInterrupted -> AF(presentLastKnownValues))
AG(operator -> AF(displayRemainingFuel & displayFlowRate & displayBingoFuel))
AG(LOL -> EF(estimatedPosition))
AG(LOL -> EF(displayLOLTimer))
AG((Level_i & (i >= 1 & i <= 5)) -> EF(interoperableWithPayload))
AG(controlMonitorPayload)
AG(receiveDataFromPayload & controlPayloadOnOtherTCS)
AG(TCSCapabilities & BeyondLineofSight & controlTwoAVs & uplinkCommand & sequentialCommunication)
# i, j & i != j : AG !(communicationWith_i & communicationWith_j)
AG(receiveData & processData & presentData -> EF(determinedStatus))
AG(payloadInstalled -> EF(allMethodsControl))
AG(payloadControl -> EF(graphicalInterfaceDisplay))
AG(payloadAutomation -> EF(operatorOverride))
AG(missionPlan -> EF(monitorPayloadAdherence))
AG(map -> AF(displaySearchFootprint & displaySearchHistory))
AG(simultaneousControl -> AF(controlMonitorLOS & controlMonitorBLOS))
AG(dataObtained -> AF(recordData))
AG((interfaceDataTerminal & issueCommands) -> EF(establishDataLink & controlDataLink & maintainDataLink))
AG(dataTerminalControl -> EF(antennaPointingControl & transmitterControl & receiverControl))
AG(selectedDataTerminal -> EF(autoModeSelection))
AG(LOSDataTerminal -> AF(acquisitionMode | autotrackMode | searchMode | manualPointMode | omniDirectionalMode | directionalMode)) & (selectedDataLink)
AG((manualOverrideDesired & !(EMCON | HERO)) -> EF(manualOverrideActivated))
AG(supportLOSDataLink & supportSATCOMDataLink)
AG((shipboardOperations & secondAntennaAvailable & activeAntennaObstructed) -> AF(switchToSecondAntenna))
AG((AVhasSATCOM & (beyondLOSrange | LOSobstructed)) -> AF(switchToSATCOMantenna))
AG(dataLinkTerminalActive -> EF(interactiveDisplay))
AG(autoPoint | (opDesire -> AF(manualPoint)))
AG(posAntennaLOS & posAntennaSATCOM)
AG(platformMotion -> AF(threeAxisStabilization))
AG(selectedDataTerminal -> AF(autoControlTransmitterAndReceiver))
AG(operatorDesire -> AF(manualOverride))
AG(selectedDataTerminal -> AF(autoControlTransmitterAndReceiverModes))
AG(autoMode -> EF(manualOverride))
AG(dataTerminalSelected -> AF(autoFrequencyControl))
AG(autoFrequencyControl -> EF(manualFrequencyControl))
AG((TCSReceiving & TCSProcessing & TCSPresenting) -> AF(dataTerminalStatus & AVDataLinkStatus))
AG((receivedSignal & transmittedSignal) -> AF(monitoringSignalStrength & displayingSignalStrength))
AG((receivedSignal & transmittedSignal) -> AF(monitoringSignalQuality & displayingSignalQuality))
AG(presentingOperationalRanges -> AF(minimumRange & maximumRange))
AG(managePayloadProduct == receiving & managePayloadProduct ==processing & managePayloadProduct ==displaying & managePayloadProduct ==limitedExploitation & managePayloadProduct ==payloadSensorOutput & managePayloadProduct ==AVTelemetryData & managePayloadProduct ==payloadTelemetryData)
AG(processPayloadData == EOData & managePayloadProduct ==IRData & SmanagePayloadProduct ==ARData)
AG(formattingVideo & storingVideo & routingVideo & recordingVideo & creatingFreezeFrame & storingFreezeFrame & retrievingVideo & displayingVideo & printingFreezeFrame & processingImageryForExport)
AG(receivingPayloadData)
AG(storingPayloadData)
EF(externalStorageUtilized)
AG(processingPayloadImageryData -> AF(complianceWithCIGSS & complianceWithUSIS & complianceWithVWGSA & complianceWithNITFv2 & complianceWithGCCS))
AG(NITF2ImageryFilesGenerated -> EF (imageryExploitableByC4ISystems))
AG(textEntryCapability -> AF (annotateTextOnImagery))
AG(receiveSecondaryHAEUAVImagery)
AG(payloadTelemetryDataAvailable)
AG(operatorRequest -> EF(liveImagery & annotationOverlay) | EF(recordedImagery & annotationOverlay) | EF(liveImagery & !annotationOverlay) | EF(recordedImagery & !annotationOverlay))
AG(applicable -> EF(simultaneousView & multiplePayloadsData))
AG(operator -> EF(selectOverlayContent))
AG(TCS -> AF((selectCrossHairs | deselectCrossHairs) & identifyTargetPoint))
AG(operatorRequest -> EF(routedToTCS & display & (RS170A_Video | digitalImagery)))
AG(TCS & payloadProductData -> (EF(limitedExploitation & (voiceReporting | textualReporting) & (spotObjectives | missionObjectives))))
AG(imageEnhancementCapability -> (contrast & brightness & edgeEnhancement & sharpness))
AG(TCS -> AF(captureFrozenFrames & storeFrozenImages))
AG(TCS & displayNRTImagery -> AF(dateTimeGroup & targetLocation & notSeekingArrow & AVPositionAndHeading))
AG(TCS & payloadImageryDisplay -> AF(computeRangeAndBearing & twoGeographicPositions))
AG(TCS -> AF(determineTargetCoordinates & estimateTargetCoordinateAccuracy))
AG(TCS -> AF (supportTargetLocationFunction & operatorRequest -> payloadFieldOfViewCenter))
AG(TCS -> AF (determineItemLocation & expressMilitaryCoordinates))
AG(TCS -> AF(developErrorEstimate & associateErrorEstimate))
AG(TCSEntersDIICOEC4INetwork)
EF(infoReceived) & EF(infoProcessed) & EF(infoTransmitted) & EF(handleTextMessages) & EF(handleNITF20Imagery) & EF(handleRS170AVideo)
AG(interoperateWithDataServer)
AG(deliverLiveVideoImagery)
AG(interfaceWithRadios)
AG(complyWithVMF)
AG(exportNITF) & AG(disseminateDigitalImagery) & AG(exportRS170A) & AG(disseminateTacticalMessages)
AG(TCS -> AF(sendTacticalCommunicationMessage & receiveTacticalCommunicationMessage))
AG(TCS -> AF((sendAnnotated & receiveAnnotated) & (sendUnannotated & receiveUnannotated)))
AG(TCS -> AF(establishCommunication & AF(AF(terminateCommunication))))
AG(TCS -> AF(establishPeripheralCommunication & AF(AF(terminatePeripheralCommunication))))
AG(TCS -> AF((sendImagery & overlay & AF(AF(receiveImagery & overlay))) | (sendImagery & noOverlay & AF(AF(receiveImagery & noOverlay)))))
AG(TCS -> AF(establishAnalogCommunication & AF(AF(terminateAnalogCommunication))))
AG(TCS -> AF(establishAnalogCommunicationToPeripheralDevices & AF(AF(terminateAnalogCommunicationToPeripheralDevices))))
AG(TCS -> AF(receiveC4IMessages & AF(AF(processC4IMessages & AF(AF(prepareC4IMessagesForTransmission))))))
AG(TCS -> AF(createUSMTFMessages) & AF(createTACFIREMessages) & AF(createOTHGoldMessages) & AF(createIEWCOMCATMessages))
AG(TCS -> AF(reviewITCMessages))
AG(TCS -> AF(prepareAnnotatedDigitalImageryForTransmission) & AF(prepareUnannotatedDigitalImageryForTransmission))
AG(TCS -> AF(reviewIncomingAnnotatedDigitalImagery) & AF(reviewIncomingUnannotatedDigitalImagery))
AG((erroneousMessages & !correctableByTCS) -> AF(flaggedToOperator))
AG((incomingMessages | outgoingMessages) -> AF(logMessages))
AG(TCS -> AF(prepareAnnotatedImagery | prepareUnannotatedImagery))
AG(TCS -> AF(receiveAnnotatedImagery | receiveUnannotatedImagery))
AG(C4IInterfaces -> AF(monitorStatus & displayControlInfo))
AG(TCS -> AF(displayC4ISupport & displayC4IOnline))
AG(TCS -> AF(monitorIncomingMessagesStatus & monitorOutgoingMessagesStatus))
AG(TCS -> AF(reviewReceivedMessages & reviewTransmittedMessages))
AG(TCS -> AF((viewIncomingAnalogImagery & viewOutgoingAnalogImagery) & (viewAnnotatedAnalogImagery & viewUnAnnotatedAnalogImagery)))
AG(TCS -> AF((viewIncomingDigitalImagery & viewOutgoingDigitalImagery) & (ViewAnnotatedDigitalImagery & viewUnAnnotatedDigitalImagery)))
AG(executeAVMaintenanceSoftware -> AF(displayStatusResults))
AG(executePayloadMaintenanceSoftware -> AF(displayStatusResults))
AG(executePayloadMaintenanceSoftware -> AF(displayStatusResults))
AG(executeWorkstationPeripheralMaintenanceSoftware -> AF(displayStatusResults))
AG(startupFDLOperatorWorkstation)
AG(requiredByOEM -> EF(controlAndMonitorFDL))
AG(authorizedOperator -> EF(installSoftwareUpgrades))
AG(operatorAccessCapability -> EF(passwordProtection))
AG(authorizedOperator -> EF(modifyTCSParameters))
AG(operator -> AF(passwordProtection))
AG(TCS -> AF(importCapability))
AG(operatorProcedure -> AF(mapInformationImportCapability & vectorFormatCapability & CADRGCapability))
AG(authorizedOperator -> AF(executeSoftwareDebugCapability & viewDebugDiagnosticInfo))
AG(operatorAccessToDebugCapability -> EF(passwordProtection))
AF(interfaceExternalSystem)
AF(interfaceDoDRadio & interfaceMobileSubscriberEquipment & interfaceSatelliteComm)
AF(interfaceExternalMission)
AF(interfaceDataTerminal)
AF(interfaceExternalSystems)
AF(interfaceLaunchRecoverySystems)
AG(externalCommunicationToC4ISystems & utilizeUCP & utilizeCMP & useTACOMMMessages)
AF(TCSIntegrationWithASAS)
AF(TCSIntegrationWithJSTARS_GSM)
AF(TCSIntegrationWithJMCIS)
AF(TCSIntegrationWithJSIPSN)
AF(TCSIntegrationWithAFATDS)
AF(TCSIntegrationWithCARS)
AF(TCSIntegrationWithCCTV)
AF(TCSIntegrationWithServiceMissionPlanner)
AF(TCSIntegrationWithAMPS)
AF(TCSIntegrationWithAFMSS)
AF(TCSIntegrationWithTAMPS)
AF(TCSIntegrationWithGCS_ACS_IPF)
AF(TCSIntegrationWithJDISS)
AF(TCSIntegrationWithTES)
AF(TCSIntegrationWithIAS)
AF(TCSIntegrationWithATHS)
AF(TCSIntegrationWithATWCS)
AF(TCSIntegrationWithCOMPASS)
AF(TCSInterfaceWithUAVDataLinks)
AG(TCSSupportLOSDataLink & TCSSupportSATCOMDataLink)
AF(interfaceWithExternalPrinter)
AF(printVideo & printC4IMessages & printMissionPlans & printFDLInfo & printMapDisplay)
AF(outputDigitalMessageData & outputImagery)
AG(interfaceWithExternalDataStorage)
AG(TCS -> AF(transferDigitalData & transferDigitalImagery))
AG(TCS -> AF(interface))
AG(connectToPowerSupply)
AG(interfaceToNavigationInfo & locationDataTerminals & locationLaunchRecoverySites & locationControllingTCS)
AG(TCS & AVStandardInterface -> AF(properDataFormat & communicationWithAV))
AG(futureAVsAddition) & AG(genericArchitectureForInteroperability)
AG((uplinkInfo | downlinkInfo) -> AF(accordanceAVDoc))
AG(concurrentUplinkDownlink)
AG(TCS -> AF(internalInterface & RTPCommunication))
AG(infoAvailability)
AG(distributedProcessing)
AG(RTPSpecDefined)
AG(multipleOperators -> AF(intercomSystem & verbalCommunicate))
AG(operational_Intercom -> AF(compatible_intercom))
AG(intercomSpecsDefinedInTCS253)
AG(TCS -> AF(interface))
AG(TCS & TCSDisplay -> AF(controlOperatorVCR))
AG(TCS & VCR -> AF(Route))
AG(RS170AInterface -> AF(outputToVCR & inputFromVCR))
AG(TCS -> AF(outputPortsForPrinter))
AG(TCS & operator -> AF(printFreezeFrameVideo & printC4IMessages & printMissionPlans & printFDLInfo & printCurrentMapDisplay))
AG(TCS -> AF(accessStorageDevices))
AG(TCS -> AF(transferDigitalData & transferDigitalImagery))
AG(TCS -> AF(CDDriveRetrieval))
AG(RAIDRequired -> EF(TCSDataStorage & TCSDataRetrieval))
AG(TCS -> AF(interfaceToUPS))
AG(TCS -> AF(sufficientCuesForTakeoff & sufficientCuesForLanding & sufficientCuesForNavigation)) 
AG(TCS -> AF(UAVoperateWithinEnvelope))
AG(unsafeFlightRegime -> AF(provideWarnings))
AG(missionPlanning -> AF(terrainAvoidanceWarning & minRecAltitudeCalculation))
AG(UAVMalfunction -> AF(operatorCautionWarning))
AG(needForSafeSeparationAndAltitude -> AF(TCSprovidesSafeSeparationAndAltitudeInfo))
AG(singleHardwareFailure -> AF(!unsafeCommandTransmitted))
AG(singleSoftwareFailure -> AF(!unsafeCommandTransmitted))
AG(powerOutage -> AF(powerRestored & !lossOfControl))
AG(TCS -> AF(monitorUplink_i & monitorDownlink_i))
AG(lossOfLink -> AF(reestablishCommunication))
AG(TCS -> AF(protectionAgainstInjuryOperators & protectionAgainstInjuryMaintenancePersonnel))
AG((TCSUserClearance & TCSDataSensitivity) -> EF(riskIndex & minimumSecurityRequirements))
AG((airVehicleDataSensitivity & payloadDataSensitivity & C4IDataSensitivity) -> EF(TCSDataSensitivity))
AG(TCS -> EF(protect_Threats & protect_AntiRadiationWeaponry & protect_PhysicalDestruction))
AG(approvedOperationLevel == interfaceSystemOperationLevel)
# i : AG(TCSAccess_i -> AF(clearedToHighestSensitivity_i))
EF(initialSecurityTraining & awarenessBriefing & TCSTailoredTraining)
AG(TCS -> AF(operatesIn_Environment))
AG(TCSHardware -> AF(mounted & ruggedized)) & AG(TCSHardware -> AF(interTheaterMovement & intraTheaterMovement))
AG(TCSHardware -> AF(receiveData & processData & disseminateData & performMissionPlanning & monitorPayload & controlPayload & monitorAV & controlAV & monitorDataLinks & controlDataLinks))
AG(TCSHardware -> AF(longRangeCommunications & dataStorageExpansion & accessOtherComputers & externalPeripherals))
AG(TCSHardware -> AF(supportDataRate))
AG(outriderSystem -> EF(TCS & independentComputerRedundancy))
AG(TCS & selectedDataLink -> EF(sufficientThroughput))
AG(TCS -> EF(additionalStorage & !majorHardwareReconfiguration))
AG(TCS -> AF(hasCDROM & compatibleWith))
AG(powerOutage -> AF(powerRestored & !lossOfCriticalMissionData & !lossOfControl))
AG((landing | takeoff) -> EF(uninterruptedPower))
AG(throughput <= capability) & AG(throughput <= capability)
AG(memoryUsed <= totalMemory) & AG(memoryUsed <= totalMemory)
AG(TCSLatency <= min_predatorGCSLatency_outriderGCSLatency)
AF(emplacement -> EF(missionPlanning & missionLaunching & timeForPlanningAndLaunching <= 1))
AG(controls -> AF(missionControl & missionMonitoring & missionUpdates & coldWeatherClothing & MOPP))
AG(malfunction -> AF(operatorCaution & operatorWarning))
AG(performingTask -> AF(receiveWarning))
A(!disableDisplay W enterAcknowledgment)
AG(operatorResponseRequired -> AF(visualOutput & auditoryOutput))
AG(visualAlertRequired -> AF(visualAlertDisplayed & priorityGreater))
AG(alertMessagesDisplayed & auditoryAlertsProvided & volumeAdju)
AG(messagesArchived & actionsArchived)
AG(erroneousInput -> AF(!processingTerminated))
AG(promptForValidInput)
AG(!perceptibleJitterFlicker)
AG(operatorCommand -> AF(systemAcknowledgement & timeForAcknowledgement <= 1))
AG(processingCapability & displayCapability & controlCapability)
AG(controlFeedbackIndicators & statusFeedbackIndicators)
AG(selectObjectCapability & amplifyObjectCapability)
AG(rapidAuralWarningCancellation)
AG(AVSafetyWarning | missionCriticalWarning -> AF(defaultSelection & overrideOption & adaptiveResponses & minimalInfo) & respondingQuickly & respondingAdaptively)
AG(autoDesignateTargetLocation)
AG(missionPlanningTraining & missionControlTraining & imageryProcessingTraining & tacticalCommsTraining & AVControlCommsTraining & onLineDiagnosticsTraining)
AG(TCSOperationTraining & TCSUAVFunctionsTraining & onLineTroubleshootingTraining)
AG((trainingOperation & !missionExecution) | (!trainingOperation & missionExecution))
AG((communicationsProcessing  == trainingMessages & trainingOperation== trainingMessages ))
AG(operatorActions & maintainerActions)
AG(operatorPerformanceMeasurable & maintainerPerformanceMeasurable)
# i: AG(serviceSupportsTCS_i)
AG(useGPTE & useCommonTools)
AG(TCSTransport == UAVSystemTransport)
AG((system == army | system == marineCorps) -> AF(transportation == ground | transportation == air | transportation == rail))
AG((system == airForce) -> AF(transportation == air))
AG(theater -> AF(moveAroundAirfield))
AG(groundTransportable)
AG(airTransportableCH47CH53D & airTransportableC130)
AG(seaTransportable)
AG(trailTransportable)
AG ((seaTransportConfigured & groundTransportConfigured & airTransportConfigured) & configurationTime <=2)
AG(TCS -> EF(integratedInAircraft & operatedFromAircraft))
AG(TCS -> EF(integratedInSubmarines & operatedFromSubmarines))
AG(TCS -> EF(integratedInLandPlatforms & operatedFromLandPlatforms))
AG(TCS -> EF(integratedInShips & operatedFromShips))
AG(product -> EF(supportedByAllQtOS))
AG(undoable) & AG(redoable)
AG(userPlaying -> AF(countTime & displayTime))
AG(userAction -> AF(actionCount & actionCountDisplayed))
AG(userPlaying_i -> EF((timeRecorded & countRecorded) & userNameAssociated_i))
AG(ccoresRecorded -> AF(windowDisplayedWithScores))
AG(selectedBlockFollowsMouse -> AG(!overlapWithOtherBlocks & !exitGameZone) & AG(!nearOtherBlocks))
AG(lastMovement -> EF(displayBlockPositionsAtPreviousPlaces & isMovement))
AG(!previousMovement -> AG(!undoable))
AG(movementCancelled -> AF(redoable))
AG(movementCancelled -> AF(displayBlockPositions & previousBlockPositions_i & isMovement))
AG(!undoAction -> AG(!redoable))
AG((blockMovementsCurrentPlayer < maxBlockMovementsStatFile) -> AF(displayFinishWindowWithStats)) & AG((blockMovementsCurrentPlayer >= maxBlockMovementsStatFile) -> AF(displaySimpleFinishWindow))
AG(gameStart -> AF(recordedBlockMovements & recordedTime))
AG(blockMovement -> AF(blockMovementsCount == blockMovementsCountPrevious & timeDifference == DeltaTime))
AG(numberOfPlayerStatistics == 10)
AG(player -> EF(recordedInFile_i & nameRecorded_i & blockMovementNumberRecorded_i & timeRecorded_i))
AG((numberOfPlayerStatistics == 10) -> AF(EF(statisticsErased_i & highestBlockMovement_i)))
AG((fileUpdateSuccess) -> EG(!output)) & AG((!fileUpdateSuccess) -> EG(errorMessageDisplayed))
AF(userCanEraseStatistics)
AF(dialogBoxOpen -> EF(userChoosesFile & gameDataLoaded))
AG(fileDataLoaded -> AF(boardGameRedrawn & playerStatisticsSet))
AG((gameNeverSaved -> EF(saveAsProcess)) & ((!gameNeverSaved) -> EF(gameSaved & blocksCurrentPositionsSaved & last10000PositionsSaved & numberOfPreviousMovementsSaved & timePassedSaved)))
EF(userChoosesFile -> AF(blocksCurrentPositionsSaved & blocksPreviousPositionsSaved & numberOfPreviousMovementsSaved & timePassedSaved))
AG(!gameSaved -> AF(dialogBoxDisplayed & (userSelectsYes -> EF(actionSave & mainWindowDisappears)) & (userSelectsNo -> EF(mainWindowDisappears))))
AG(!sellVoucher & createVoucher)
AF(submitSalesDetails)
AF((client | partner) & chooseService & getTreatment)
AG(consultation -> AF((!cured & (firstFollowUp & E(!cured U secondFollowUp)))))
AG(!Cured -> AF(referredToAnotherHospital))
AG((missingInfo | falseInfo) -> AF(rejectClaim & quarantineClaim))
AG(sentBackToVSP -> AF(returnedWithSatisfactoryDetails & AF(enteredOntoSystem)))
AG(paymentTermsAgreed -> AF(generateReport & AF(sendToMSIU & AF(arrangePayments))))
AG(MSIUAdminTeam -> AF(getClientFeedback & AF(AF(sendToFieldOffice & AF(AF(enterIntoDatabase)))))) 
AG(generateVoucher -> AF(uniqueID & secureProtocol))
AG(printCode -> AG(barForm))
AG(validityCheck & (alterValidity -> authorizedUser))
AG(voucher -> EF(MRP))
AG(voucherSlip)
AG(authorizedPerson -> createVoucher)
AG((createdVoucher & adminDecision) -> withholdVoucher)
AG(voucher -> EF(amendValidityDate))
AG(distributor -> EF(distributorDetails & salesDetails))
AG(distributor -> EF(uniqueCode & detailedDescription))
AF(systemCheckDuplicatedID)
EF(distributorName & duplicateName)
AG((distributorName & duplicateName) -> AF(warningMessage))
AG(distributorScreen -> AF(salesHistory))
AG(userLoginPermission -> AF(printReport)) & AG(noUserLoginPermission -> AF(!printReport))
AG(distributionTransaction -> AF(salesmanSelected))
AG(programExtended -> AF(useSalesTeamMaster))
AG((distributorRequiresVouchers & sufficientStock) -> AF(vouchersAllocated))
AF(autoGeneratedInvoiceNo)
AF(!distributor | !salesman) -> EF(openMasterScreen & (enterNewDistributor | enterNewSalesman))
AG(enterVouchers -> EF(autoPickBatch & listVoucherDetails))
AF(distribution -> EF(currentDate & (pastSaleDate | futureDateValidation)))
AG(serviceCompletion -> EF(provideVoucher & (visitType & stickVoucherToClaimForm)))
AG(serviceCompletion -> EF(placeThumbPrint))
AG(VSPcollectClaims -> EF(sendToMSIUFieldOffice))
AG(tryCreateExistingVSP -> EF((continueYes -> AF(duplicateVSPAllowed)) & (continueNo -> AF(!newEntrySaved))))
AG((VSPActivation | VSPInactivation) -> EF(MSIUManagementDecision))
AG((fraudEntriesVSP > 2) -> AF(VSPStatus == inactive))
EG(EF(enterPaymentTermsMSIUVSP))
AG(userPermission -> EF(addVSPInfo) & EF(modifyVSPInfo) & EF(deleteVSPInfo))
AG(VSPScreenSelected -> EF(viewClaimStatus))
AF(enterClaim -> EF(captureVSPStaffDetails & captureMasterInfo))
AG((newStaff & existingName) -> EF(warningMessage & saveNewStaff))
AF(!staffType -> EF(openStaffTypeMaster & enterNewStaffType))
AF(paymentTerms -> EF(submitClaimToFieldOffice))
AG(formCheckedManually -> A(!claimEntry W mandatoryInfoPresent))
AF(missingMandatoryInfo -> EF(markAsRejected & sendBackToVSP))
AG(enterTreatmentDetails -> AF(numOfSyndrome & numOfClinicalExaminations & numOfDiagnosis & numOfLabTests & numOfDrugs & numOfOtherMeasures))
AF(captureThumbImpression -> EF(comparePreviousThumbImpressions))
AF(mismatchedThumbImpressions -> EF(countMismatchedImpressions))
AG((VSP & moreThanTwoTimesThumbImpressionMismatch) -> AF(warningMessage & inactivateVSP))
AG(VSPStaff -> EF(getThumbImpression & stickVoucherOnClaim))
AG(claims -> AF(mandatoryInfoComplete))
AG(calculateClaimAmount -> AF(treatmentMatrix))
AG(voucherReturned -> AF(voucherSoldToDistributor == voucherAccepted))
AF(MSIUTeamCollectsFeedback & clientGotTreatment)
AG !(userAltersTreatmentInfo)
AG(admin -> AF(userGroupCreation))
AG(userGroup -> AF(userCreation))
AG((password == verifyPassword) -> EF(saveUserInformation))
AG(!existingUserGroupName) & AG(!existingUserName)
AG(investigatingEvent -> AF(uniqueEventID))
AG(caseDefinitionChange -> AF((manualUpdate | automaticUpdate) & caseDiagnosis))
AG(collectingEpiData -> AF(onsetDateTime) & AF(symptomType) & AF(riskFactors) & AF(medicalHistoryData) & AF(laboratoryData) & AF(procedureData) & AF(questionnaireResponses))
AG(event -> AF(captureData))
AG(case -> AF(recordedEntity & linkedEntity))
AG(collectInvestigatorData -> AF(investigatorName) & AF(investigatorAddress) & AF(investigatorContact))
AG(investigatingEvent -> AF(investigatingJurisdiction) & AF(reportingJurisdiction))
AG(entityAssociatedWithInvestigation -> EF(classifyAsInvestigationControl))
AG(exposureInvestigation -> AF(exposureLevels) & AF(typeOfExposure) & AF(placeOfExposure) & AF(exposureDuration) & AF(exposureFrequency) & AF(proximityToSource))
AG(exposedSubject -> EF(monitoringData) & EF(followUpData))
AG(caseOrExposedIndividual -> EF(monitoringActivities) & EF(followUpActivities))
AG(isolated |quarantined -> EF(monitoringData))
AG(subject -> EF(followUpData & (trackSymptoms & treatmentCompliance)))
AG(receivedCountermeasure -> AF(responseExam & followUpData))
AG(collectedSpecimen -> AF(uniqueSpecimenID))
AG(collectedSpecimen -> AF(uniqueSubjectID & linkedSpecimen))
AG(collectedSpecimen -> AF(storeSpecimenData))
AG(capturingSpecimenData -> EF(supportBarcode))
AG(specimenSample -> AF(captureChainOfCustody))
AG(specimenSample -> EF(createLabTestRequest))
AG(batchShipment -> AF(shipper & shipmentTrackingNumber & sendingOrganizationContactInfo))
AG(batchShipment -> EF(labeling & packaging & shippingInstructions & shippingManifest))
AG(labResults -> EF(storeResults & linkToTestRequest))
AG((specimenCollectionRecord & laboratoryResult) -> EF(linkedHySpecimenID))
AG((!specimenCollectionRecord & laboratoryResult) -> EF(linkedBySubjectID))
AG(supportSpecimenSampleLevel) & AG(supportAssayLevel)
AG(administeredTreatment -> EF(!AdministeredReason))
AG(administeredVaccineOrProphylaxis & negativeReaction -> EF(adverseEventData))
AG(createQuestionnaire -> AF(validateQuestionnaire) & AF(collectCommonDataElements) & AF(collectAgentSpecificDataElements) & AF(collectCustomDataElements))
AG(electronicQuestionnaire -> EF(digitalSignature))
AG(investigationSpecificQuestionnaire -> EF(controlConfiguration) & EF(revisions))
AG(OMSupportingSystem -> AF(publishInvestigationQuestionnaires & publishImplementationGuides))
AG(caseInvestigation -> EF(reusableQuestionnaireLibraries & commonTerminology))
AG(caseDefinitionChange -> EF(manualUpdateStatus | automaticUpdateStatus))
AG(newCase & assignedEntityID -> AF(linkedToEvent))
AG(identificationProcess -> (infoCaptured & linkagesSupported)) & AG(treatmentProcess -> (infoCaptured & linkagesSupported)) & AG(followUpProcess -> (infoCaptured & linkagesSupported))
AG(labResults -> AF(linkSpecimens & linkSubjects)) & AG(linkSpecimens & linkSubjects -> AF(unambiguousAssociation))
AG(specimenCreated & labResults -> AF(linkParentSpecimen))
AG(subjectInvestigated -> AF(contactLinked))
AG(entityExposed -> AF(contactTraced) & AF(contactInvestigated) & AF(contactMonitored))
AG(caseExists -> AF(newContactCreated & contactTypeIdentified))
AG((singleContact -> AF(multipleCases)) & AG(singleCase -> AF(multipleContacts)))
AG(healthEvent -> EF(storedContactInfo))
AG(labResult -> EF(labTestRequest & EF(linkedToSubject)))
AG(countermeasuresAdministered -> AF(entityReceivedCountermeasures))
AG(messageComponentsGroupedByObservationType)
AG(dataExchange -> AF(infoSharingAtAllLevels))
AG(systemAndDataProtected & EF(systemAndDataAvailableAfterCatastrophe))
AG(sensitiveInfoAccessed -> AF(accessByAuthorized))
AG(MSCsActive -> AF(callControl))
AG(voiceCallServices -> AF(fixedMobileEquipUsers))
AG(callInitiated -> AF(pointToPointVoiceCalls))
AG(pointToPointVoiceCalls -> AF(simultaneousTalk))
AF(publicEmergencyCall)
publicEmergencyCall -> AF(emergency112Call) & AG(!railwayEmergencyCall)
AF(broadcastVoiceCalls)
AF(oneWayVoiceComms & singleToMultipleUsers & preDefinedLocalArea & sameCallGroup)
AF(callGroupModification)
AG(singleUser -> AF(callGroupMembership >= 1))
AG(network -> AF(modifyArea))
AG(initiatedCalluser -> AF(canTalkuser)) 
AF(voiceComms & multipleUsers & preDefinedLocalArea & sameCallGroup)
AF(modifyCallGroup)
AF(multiPartyVoiceComms & numberOfParties<=6)
AG(multiPartyVoiceCall -> AF(allPartiesTalkSimultaneously))
AG(network -> AF(supportPointToPointTextMessages & supportPointToMultipointTextMessages))
AF(mobileOriginatedTextMsg)
AG(textMsgFacility -> AF(highPriorityVoice | dataCall))
AG(dataRate >= 2.4)
EF(dataApplicationsRequireHighDataRate -> AF(dataRate > 2.4))
EF(supportFaxTransmission)
AG(faxFunctionality -> AF(faxInterrupt & (highPriorityVoiceCall | dataCall)))
AG(ERTMS_ETCS_Level2 | ERTMS_ETCS_Level3 -> AF(dataCommunicationTrainControl))
AG(calling | called -> AF(displayStandardTelephoneNumber))
AF(preventIdentityDisplay)
AG(callPriorityMechanism)
AG(highPriorityCall -> AF(preemptLowPriorityCall))
AG((highPriorityCall & preemptLowPriorityCall) -> AF(discontinuedCall & connectedHighPriorityCall))
AG(EIRENENetworkAccess <= limit)
AG((!EIRENEUser) -> (!EIRENEAccess))
AG(incomingCall | incomingMsg -> AF(forwarded))
AG(attemptForward -> A((converse & !forwarded) W forwarded))
AG(inCall -> AF(holdCall))
AG(holdCall -> AF(rejoinCall))
AG((existingCall & contactAttempt) -> AF(informUser))
AG(chargeableNetworkServices -> AF(callRateInfo & ongoingCallChargesInfo))
AG(networkManagementActivated -> AG(!callToOtherNetwork) & AG(!callToCertainNumbers) & AG(!callToPredefinedNumbers))
AG(networkManagementActivated -> AG(!callFromAllOtherNetworks | !callFromCertainNetworks | !callFromCertainNumbers | !callFromPredefinedNumbers)) & AG(networkMaintenanceActivated -> AG(!callFromAllOtherNetworks | !callFromCertainNetworks | !callFromCertainNumbers | !callFromPredefinedNumbers))
AG(networkSupportFunctionalAddressing & networkSupportLocationDependentAddressing & networkSupportShuntingMode & networkSupportRailwayEmergencyCalls)
AG(RadioInVehicleWithAntenna -> AF(coverageTimePercent >= 95))
AG(EIRENESupport)
AG(movingNetwork -> AF(minimiseInconvenience))
AG(callSetupStart -> AF(callSetupCompleted))
AG(callSetupStart -> AF(callSetupCompletedOnTime))
AG((groupCall | broadcastCall) -> AG(!changeUser))
AG((groupCall | broadcastCall) -> EF(participateInCall))
AG((callInitiatorLocation | groupIdentity | prefixArea) -> callArea)
AG(callOriginatorLocation -> AF(associatedArea & fixedNetworkNumbers))
AG((inCallArea -> EF(inCall)) -> AF(!InCallArea -> AF(!InCall)))
AG((mobileConfiguredForEmergencyCalls & entersCallAreaWithOngoingEmergencyCall) -> EF(joinOngoingEmergencyCall))
AG((cabRadioConfiguredForAllDriversCall & entersAreaWithOngoingAllDriversCall &  !(involvedInHigherPriorityCall | involvedInSamePriorityCall)) -> EF(joinsOngoingAllDriversCall))
AG(cabRadio -> EF (usedByTrainDriver | usedByOnTrainSystems)) & AG(generalPurposeRadio -> EF usedByRailwayPersonnel) & AG(operationalRadio -> EF usedByTrainOperationPersonnel)
AG(allMobiles -> EF (operateInRailwayBand | operateInPublicGSMNetwork))
AG(EIRENEMobileEquipment -> AF(operateOnRollingStock))
AG(mobileEquipment -> EF(sufficientBatteryCapacity))
AG(EIRENEMobile -> EF(electromagneticEmissions))
AG(EIRENENetworkOperation -> AF(!interference))
AG(callEstablished -> AF(communication))
AG(groupCall -> AF(pushToTalkAvailable))
AG(handsetPickedUp -> AF(communicationTransferred & volumeMinimized))
AG(handsetReplaced -> AF(callCancelled | (callTransferred & volumeInitial)))
AG(groupCall -> AF(PushToTalk))
AG((ergonomicNeed | avoidCabNoise) -> AF(PushToTalk))
AG(driverActionMinimal -> AF(callToPrimaryController | callToSecondaryController | callToPowerSupplyController))
AG(!uniqueIdentity -> AF(identityObtainedExternal))
AG(destinationObtained -> AF(attemptCall))
AG(callProceeding -> AF(audibleIndication & visualIndication))
AG(callConnected -> AF(audibleIndication & visualIndication))
AG(callConnected -> AF(loudspeakerOn & volumeSet == presetVolume))
AG(functionalIdentity -> AF(displayedToDriver))
AG(functionalIdentityAlphanumeric -> AF(alphanumericDescription))
AG(!callConnected -> AF(!indicationReceived))
AG((partyBusy | networkError) -> AF(indicationGiven))
AG(driverAction -> AF(initiateGroupCall & participateInGroupCall))
AG(driverAction -> EF(callInitiated))
AG(participatingDriver -> AF(displayGroupIdentity))
AG(callProceeding -> AF(audibleIndication & visualIndication))
AG(connected -> AF(pushToTalk & communicateWithOtherDrivers))
AG(wantsToTalk & !usingPushToTalk -> AF(reminderProvided))
AG(callConnected -> A(callOnLoudspeaker W driverPicksHandset))
AG((callInProgress & trainLeavesCallArea) -> AF(driverAlerted))
AG(!callConnected -> AF(audibleIndicationProvided & visualIndicationProvided))
AG(callStarted -> A(callContinues W (driverTerminatesCall | controllerTerminatesCall | networkTerminatesCall)))
AG(driverInitiateEmergencyCall)
AG((emergencyFunctionActivated | emergencyFunctionTerminated | emergencyFunctionFailed) -> AF(detailSentToRecorder))
AG(emergencyFunctionActivated -> AF(visualIndicationProvided & audibleIndicationProvided))
AG(handsetOffHook -> AF(audibleIndicationLoudspeakerLowVolume & !audibleIndicationHandset))
AG((emergencyCallConnected & audibleIndicationFinished) -> AF(reminderPushToTalk))
AG(callConnectedToLoudspeaker -> A(callConnectedToLoudspeaker W driverPicksHandset))
AG((callInProgress & AF(outOfCallArea)) -> AF(leaveCall & audibleIndication & visualIndication))
AG(callTerminated -> AF(!visualAlarmActive))
AG(!callConnected -> AF(audibleIndicationProvided & visualIndicationProvided))
A(!activeCabInitiatedCall W (activeCabInitiatedCall & AF(callEstablished)))
AG(multiDriverCall -> AG(cabRadioDisplayIndication))
AG((callOnHold & memberGroup) -> AF(notifyLeadDriver & AG(remainingCommNotAffected)))
AG(callInProgress -> AF(leadDriver & removeMember))
AG(leadDriver -> AF(terminateCall))
AG(driverDisconnected -> AF(indication))
AG((setUpMultiDriverCall | closeDownMultiDriverCall) -> AF(guidance))
# i: AG(cab_i & handsetOnHook -> AF(callConnectedToLoudspeaker))
AG(callFailure -> AF(audibleIndicationProvided & visualIndicationProvided) & cab_i)
AG(callFailureInLeadVehicle -> AF(leadDriver & reestablishCall))
AG(callFailureInOtherCab -> AF(otherDriver & callLeadCab & requestReestablishment))
AG(callWithController -> AF(controllerAdded))
EF(leadDriverCallsController) | EF(controllerCallsLeadDriver)
AF(contactOnboardStaff)
AF(intercom | internalTelephone)
AG(determineConnection -> AF(wireConnection | radioConnection))
AG((cabRadio == standardTelephone) -> EF(callValidNumber & preDefinedCallRestrictions))
EF(callInitiatedByPredefinedList) | EF(callInitiatedByDirectDial) | EF(callInitiatedByFunctionalNumber)
AG(incomingCall -> AF(audibleIndication & visualIndication))
AG((pointToPointCall & !autoAnswered) -> AF(driverAcceptsCall))
AG((driverAcceptsCall & liftingHandset) -> AF(callRoutedToHandset))
AG((groupCallReceived | broadcastCallReceived) -> AF(audibleIndication & visualIndication))
AG((VBSCall | VGCSCall) -> AF(groupIdentityDisplayed))
AG((groupCall | broadcastCall) -> AF(handsetInUse & AF(connectedToHandset)) | (!handsetInUse & AF(connectedToLoudspeaker)))
AG(broadcastCall -> AF(visualIndicatorOnMMI))
AG(broadcastCall -> AF(!driverSpeaks))
AG(groupCall & requestToSpeak -> AF(driverSpeaks))
AG(groupCall -> AF(displayPTTreminder))
AG(pushPTT -> (A(!speak W permissionGranted)))
AG(groupCall & requestToTalk -> AF(indication))
AG(driverPTTPressed -> AF(driverSpeakInCall))
AG((callInProgress & AF(outOfArea)) -> AF(indication))
AF(callReceived -> AF(distinctIndication))
AG(recorderConnected & emergencyCallReceived -> AF(detailsTransmitted))
AG(emergencyCallEnds -> AF(autoConfirmation))
AG(autoConfirmation -> EF(trainReceivedCall))
AG((terminateCall & driverAuthorized) -> AF(callTerminated & !((railwayEmergencyCallNotInitiatedByDriver) | (shuntingGroupCall))))
AG(groupCall | broadcastCall -> AF(leaveCall) & !(terminateCall))
AG(cabRadioSystem -> AF(receiveTextMessage))
AG(cabRadioSystem -> AG(shuntingMode -> AF(linkAssuranceTone)))
AF(enterShuntingMode) & AF(leaveShuntingMode)
AG((ongoingCalls -> AF(!enterShuntingMode & !leaveShuntingMode)))
AG(linkAssuranceTone -> AF(viaLoudspeaker))
AG(cabRadioEquippedWithSecurityDevice -> EF(muteAudibleIndication))
AG((linkFailure | linkCancelled) -> EF(securityDeviceAlertsDriver))
AG((networkFailure | !authorizedNetworkCoverage) -> EF(localOpenChannelCommunication))
AG(directModeImplemented -> EF(enterDirectMode) & EF(leaveDirectMode))
AG((directMode & normalNetworkServiceReturns) -> EF(audibleIndication & visualIndication))
AG((communication & !driverInvolved & cabRadioInvolved) -> EF(driverIndicationThatCabRadioIsBusy))
AG((voiceCall & cabRadioUsed & !driverInvolved) -> EF(driverCanListen))
AG((voiceCommunication & driverPicksHandset) -> EF(driverJoinCommunication))
AG(selectAnotherCall -> EF(terminateVoiceCommunication | terminateDataCommunication))
AG(cabRadioRequired -> AF(handheldPortableActivated)) & AG(cabRadioRequired -> AF(!handheldPortableActivated))
AG(cabRadioRequired -> AF(handheldPortableRecharging))
AG(cabRadioRequired -> AF(autoForwardCalls))
AG(cabRadioRequired & handheldPortableDeactivated -> AF(cancelForwardCalls))
AG(cabRadioRequired -> AF(driverOverrideCallForwarding))
AG(powerUpCabRadio -> AF(initiateSelfTesting))
AG(powerUpCabRadio -> AF(initiatePresetVolumeSelection))
AG(powerUpCabRadio -> AF(registerWithOnTrainSystems))
AG(powerUpCabRadio -> AF(recordSelfTestFailuresInTrainRecorder))
AG(powerUpCabRadio -> AF(connectToAuthorizedNetwork & lastRegisteredNetwork))
AG(powerUpCabRadio -> AF(successfulConnection & displayNetworkName & audibleIndication))
AG(powerUpCabRadio & !successfulConnection -> AF(audibleAndVisualIndication))
AG(powerUpCabRadio & !successfulConnection -> EF(manualNetworkSelectionProcedure))
AG(successfulConnection -> EF(receiveCallsWithCabRadioNumber | receiveCallsWithEngineNumber | receiveAppropriateGroupCalls | receiveRailwayEmergencyCalls))
AG(powerDown -> AF(disconnectFromNetwork))
AG(switchOff -> AF(retainStoredNumbers))
AG(MMIControl -> AF(!accidentalActivation | !accidentalDeactivation))
AG(MMIOn -> AF(selfTestMMI))
AG(MMIOn -> AF(determineRadioStatus & displayRadioStatusOnMMI))
AG(MMIOn -> ((timeSinceShutdown < x) -> EF(sameConfiguration))) & AG(MMIOn -> ((timeSinceShutdown >= x) -> EF(differentConfiguration)))
AG(MMIOn -> ((timeSinceShutdown > x) -> AF(defaultSettings)))
AG((time >= 0 & time <= 240) -> EF(consistentStateAfterPowerUp))
AG(switchOff -> AF(terminateCurrentCall))
AG(switchOff -> AF(deregisterTrainNumber))
AG(switchOff -> AF(storeRequiredData))
AG(switchOff -> AF(confirmRailwayEmergencyCalls))
AG(switchOff -> AF(providePublicAddress & callChiefConductor & intercom))
AF(language_i)
AG(default -> AF(languageDefault ==languageOwner))
EF(displayLanguages) & EF(languageSelected)
AG(languageSetByNationalRailway)
AG(language_i & i > 0 & i <= 10)
AG(powerOn -> AF(volume== DefaultVolume))
AG(rangeSelected -> AF(volumeIncrease) & AF(volumeDecrease))
AG(handsetPickedUp -> AF(loudspeakerReducedVolume))
AG(MMIAction -> AF(viewPrioritizedList))
AG(listPresented & MMIAction -> AF(selectNetwork & EF(attemptAttach)))
AG(ongoingCall -> AG(!manualNetworkSelection))
AG(manualNetworkChange -> AF(networkChangeConfirmation))
AF(autoNetworkSelection)
AG(autoNetworkSelection -> AF(activateAutoSelection) & AF(deactivateAutoSelection))
AG(borderCrossing -> AF(!autoNetworkSelection))
AG((autoNetworkSelection | directedNetworkSelection) & networkChange -> AF(audibleIndication & visualIndication))
AG(borderCrossing -> EF(manualNetworkSelection))
AG(directedNetworkSelection -> AF(externalInput -> EF(networkChange)))
AG(riskyArea -> AF(!autoNetworkSelection))
AG(inputFromExternalDevice -> EF(networkSelected))
AG((directedNetworkSelection & ongoingVoiceCall) -> E((audibleIndication & visualIndication) U (callTerminated | networkCoverageLost)))
AG(borderCrossing -> AF(directedNetworkSelection))
AG((registerTrainNumber -> EF(enterTrainNumber | initiateAutomatedRequest)) & (deregisterTrainNumber -> EF(enterTrainNumber | initiateAutomatedRequest)))
AG(enterTrainNumber -> AF(displayTrainNumber & confirmTrainNumber))
AG(initiateAutoRequest -> AF(acceptTrainNumber | rejectTrainNumber))
AG(ERTMS_ETCS_available & driverInputTrainNumber -> AF(enteredNumberTransmittedToRadio))
AG((trainRegistered & sameTrainNumber & sameNetwork) -> AF(warning & audibleIndication & visualIndication))
AG(trainRegistered -> EF(overrideTrainNumber))
AG(overrideTrainNumber -> EF(previousDriver & audibleIndication & visualIndication))
AG((journeyOngoing & (initiateChange | overrideAutoChange)) -> AF(enterTrainNumber))
AG(nonLeadingDriver -> AF(indicateLocation))
AG((registerTrainNumber -> AF(registerFunctionalNumber)) & (deregisterTrainNumber -> AF(deregisterFunctionalNumber)))
AG((registerFunctionalNumber -> AF(registerOnTrainUsers)) & (deregisterFunctionalNumber -> AF(deregisterOnTrainUsers)))
AG((endOfJourney & noTrainNumber) -> EF(deregisterIndividualFunctionalNumber | driverDeregisterAllFunctionalNumbers))
AG(FixedRelationship & (RadioChanged -> RelationshipMaintainedOnRadioChange))
AG(autoInfoOnboardSystems -> (registerStockNumber | deregisterStockNumber))
AG(autoFixedInterface -> AF(registerStockNumber | deregisterStockNumber))
AG(cabRadio -> EF(reconfigurableListOfNumbers & abbreviatedDialing))
AG(driver -> EF(findStoredNumbers & displayStoredNumbers))
AG(driver -> AF(storeNumbers & overwriteNumbers))
EF(initiateTest -> AF(radioWorking & MMIWorking))
AG(testsPerformed -> EF(!callPrevented))
AG(MMIPowered -> AF(displaySelfTestResults))
AG((incomingCall | outgoingCall) -> EF(handleCallToFromDriver | handleCallToFromOtherUsersOrDevices))
AG(driverMMIOff -> EF(dataCallPossible))
AG((radioPowered & MMIoff) -> EF(batteryPowerConserved))
AG(differentCallSources -> EF(providePriorityFunction))
AG(establishedCalls & otherCallPriorities -> EF(callOnHold | callCleared))
AG(differingPriorities -> EF(callHandled))
AG((outgoingCallRequest & higherPriority) -> AF(precedenceOverEstablishedCall))
AG(preemption -> AF(advisoryIndication))
AG(driverRequest -> EF(runTimeDiagnosticTest))
AG(runTimeDiagnostics -> EF(interfaceFailure -> AF(displayReportToDriver)))
AG(runTimeDiagnostics -> AF(failuresRecordedInTrainBorneRecorder))
AG(runTimeDiagnostics -> AF(!interferenceWithNormalOperation))
AG(railways -> AF(supportAutoTestEquipment))
AG(powerFailure -> AF(radioOperating))
AG(installedRadio -> AG(safeDriving))
AG((handsetOnHook | handsetOffHook) -> AG(callFunctions))
AG(ambientLighting -> AF(brightnessAdjustmentPossible))
EF(contrastAdjustmentPossible)
AG(emergencyButtonColor == red & emergencyButtonProtected)
AG(displayReadable)
AG(characterHeight >= 5)
AG(implementedIndications)
AG(riskOfChange -> AF(preventiveFacility))
AG(preventTampering)
AG(networkContactLost -> AF(audibleIndication & VisualIndication))
AG(tractionUnitEquippedWithDSD -> AF(DSDInterfaceProvided))
AG(DSDInterfaceImplemented -> AF(interfaceConnectsToCompliantDevice))
AG(DSDActivated -> AF(dataMessageSent))
AG(DSDAlarm -> AF(infoProvided))
AG(DSDAlarm -> AF(infoTransmitted))
AG(standardInterface)
AG(standardTelephoneUsage -> AF(validNumber & !networkRestriction))
AG(radioSendEmergencyCall -> AF(managementFunctionActive))
AG(radioSendEmergencyCall -> EF(MMISpecialAction))
AG((shortCodeDialed | telphoneNumberDialed) -> (!RadioSendEmergencyCall))
AG(identityAvailable -> AF(identityDisplayed))
AG(incomingCall -> AF(audibleIndication & visualIndication))
AG(voiceGroupCall -> AF(groupIdentityDisplayed))
AG(broadcastCall -> AF(userInformedCannotSpeak))
AG(groupCall -> AF(userRequestsPermission & PTTused))
AG(groupCall -> AF(visualIndication)) & AG(visualIndication -> AF(reminderToUsePTT))
AG(groupCall -> (usePTT -> E(!speak U permissionGranted)))
AG(groupCall -> (usePTT -> EF(successfulRequest & audibleIndication & visualIndication & speak)))
AG((groupCall | broadcastCall) & callInProgress & userMovesOut -> EF(audibleIndication & visualIndication & lossOfCall))
AG(callImplemented -> ((groupCall | broadcastCall) -> EF(distinctiveAudibleIndication & distinctiveVisualIndication)))
AG(callInSession & ((!userInitiatedCall & (broadcastCall | groupCall)) -> EF(!callTerminatedByUser)))
AG(!(radioOn & radioOff)) & AG(radioOn | radioOff)
AG(radioOn -> AF(displayLighting & controlLighting & indicatorLighting))
AG(radioOn -> AF(selfTesting))
AG(radioOn -> AF(selfTest & (selfTestFail -> AF(visibleIndication & audibleIndication))))
AG(radioOn -> AF(connectionSuccessful & (networkNameDisplayed & audibleConfirmation)))
AG(radioOn -> AF(!connectionSuccessful -> (audibleIndication & visualIndication)))
#AG(radioOff -> AF(forall c : callUnderControl(c, radio) -> callTerminated(c)))
AG(radioOff -> AF(disconnectedFromNetwork))
AG(radioOff -> AF(clearDisplay & AF(AF(inhibitFunctions))))
AG(radioOff -> AG(retainSettings & retainNumbers))
AG((mobileNetworkAvailable > 1) -> AF(automaticNetworkSelection))
AG((userOverride & !callActive) -> EF(manuallyNetworkSelection & !networkSelectedAutomatically)) & AG(callActive -> AF(!userOverride))
AG(changeOfFunctionalNumberRequired -> EF(userInitiateChange))
AG(abilityToInitiateRailwayEmergencyCall -> AG(!accidentalEmergencyCallInitiation))
AG(batteryLow -> AF(visualIndication & audibleIndication))
AG(networkServiceAvailable -> AF(indication))
AG(!networkServiceAvailable -> AF(visualIndication))
AG(numberObtained -> AF(callAttemptedWithPriority))
AG((emergencyCallDisabled & radioSwitchedOn) -> AF(indication))
AG(powerApplied -> AF(DPU_BOOTExecutes))
AG(powerOn -> AF(DPU_BOOTExecutes & AF(AF(testDRAM & clearDRAM & COLD_MEM_SIZEObtained))))
AG(DPU_BOOTExecutes -> AF(processorSpeedSetMHzValue))
AG(DPU_BOOTExecutes -> AF(BC_INDEXPrimary -> AF(primaryConfigurationBooted)) | (BC_INDEXAlternate -> AF(alternateConfigurationBooted)))
AG(DPU_BOOTReadsBC_INDEX -> AF(BC_INDEXToggled))
AG(DPU_BOOTExecutes -> AF(RTOSLoaded & AF(RTOSStartsExecution)))
AG(DPU_BOOTExecutes -> AF (CPU_BIT_branchTest_fixedPointTest_floatingPointTest_interruptedTest_timerTest_registerTest))
AG(CPU_BITComplete -> AF(RecordCreated))
AG(DPU_BOOTExecutes -> AF(DRAM_BIT_writeReadCompareTest1_writeReadCompareTest2))
AG(writeReadCompareTest1 -> AF(writeAddressToMemory))
AG(writeReadCompareTest2 -> AF(writeComplementToMemory))
AG(DRAMFailureOccurs -> AF(BIT_DRAMRecordCreated))
AG(DPU_BOOTExecutes -> AF(commandsAcceptedOverRS232))
AG(CTSSignalActive -> EF(BootstrapMonitorActivated)) & EF(activityNotDetectedWithin30Sec -> (AF(loadConfigurationDPU_RTOSAccordingToBC_INDEX)))
AG(DPU_RTOSCopied & DPU_RTOSExecuted -> AF(BOOT_CNT== BOOT_CNT1))
AG(BootstrapMonitorActivated -> EF(readFromDRAM) & EF(readFromVMEbus) & EF(readFromIOCC))
AG(BootstrapMonitorActivated -> EF(writeToDRAM) & EF(writeToVMEbus) & EF(writeToIOCC))
AG(BootstrapMonitorActivated -> EF(downloadConfigurationToEEPROM))
AG(commandReceived -> EF(loadConfigurationToDRAM & startExecution))
AG((hardwareReset & !CTSAsserted) -> AF(Stage1BITComplete & AF(DPU_RTOSLoaded)))
AG(failureDetected -> AF(attemptNormalExecution))
AG(BITfailureDetected -> AF(logToSYSTEM_BLOCK))
AG(BITfailureDetected -> AF(displayMessageViaRS232))
A(!executeStage1BIT W initializeBIT_DATA)
AG(commandEntered -> AF(validateSyntax & validateArguments))
AG(invalidCommandArgumentEntered -> AF(outputErrorMessage))
AG(incorrectNumberOfArgumentsEntered -> AF(outputErrorMessage))
AG(downloadCompleted -> AF(computeCHKS_32 & compareCHKS_32 & outputCHKS_32s & outputSuccessMessage))
AF(putProcessorInDiagnosticMode)
AF(enablePowerToEEPROM)
AF(disableWriteProtectionEEPROM)
AF(enableEDAC)
AG(followBSPS01Protocol)
AG(DPUBOOTCSCActivated -> EF(clearDRAM & initializeEDAC))
AG(DPUBOOTCSCXActivated -> sizeOfDPUBOOTCSCX <= 32)
AG(writeOperation -> AF(withinCmsecs | waitDusecs))
AG(writeOperation -> AF(waitCmsecs & AF(AF(readOperation))))
AG(write32bit)
AG(read32bit)
AG(realTime & multiTasking)
AG(schedulingTask -> AF(priorityBasedScheduling))
AG(timeSlicing)
AG(internalVMEInterrupt | externalVMEInterrupt -> AF(invokeISR))
AG(startup -> AF(executeBIT & AF(AF(installDrivers & AF(AF(executeLoopbackTests & AF(AF(spawnSoftware))))))))
AG(needToLoadObjectModule -> AF(loadObjectModuleFromEEPROM))
AF(writeToRTCRegisters)
AF(readFromRTCRegisters)
AG(resultsInSYSTEM_BLOCK -> AF(excludeFailedDRAM))
AG(!includeIVTInMemoryTable) & AG(!includeTextDataSegmentInMemoryTable)
AG(isTextSegmentWriteProtected) & AG(isIVTWriteProtected)
AG(systemException -> AF(recordInterruptVector & AF(AF(systemReboot))))
AG(DPUBIT -> AF(writeReadCompareTest1) & AF(writeReadCompareTest2))
AG(writeReadCompareTest1 -> AF(constructAndWriteHalfWords))
AG(writeReadCompareTest2 -> AF(constructAndWriteComplement))
AG(DPUBIT -> AF(MIL_STD_1553B_BIT))
AG(DPUBIT -> AF(testEDAC & readPreprogrammedErrorLocations))
AG(DPUBIT -> AF(computeChecksum & compareChecksumToStored))
AG(DPUBIT -> AF(bitCompleteTime <= 15))
AG(errorDuringTest -> AF(failureReported))
AG(addressHardwareModules) & AG(addressCompanyXModules) & AG(addressIBMModules)
AG(use1553DriverCSC)
AG(backgroundTask -> AF(walkingDRAM & trippingSBEs))
AG(SBEOccurs -> AF(SBEDetected == SBEDetected1)) & AG(boot -> (SBEDetected == 0))
AG(requestBIT_HK -> AF(reportBIT_HK))
AG(SBE -> AF(installISR & scrubLocation))
AG(MBE_DRAM -> AF(recordEDAC_HK & forceDPUWatchdog))
AG(requestEDAC_HK -> AF(reportEDAC_HK))
AF(SCM_ADC_MUXRead & SCM_ADC_DATRead)
AG(DPU_ADCError -> AF(ERRNOSet & ERRORReturned))
AF(SCM_ReadInBBitWords)
AF(SCM_WriteInBBitWords)
AF(setIBGTimeout)
AG(IBGReceiveInterrupt -> AF(callbackRoutineInstalled))
AG(IBGTransmitInterrupt -> AF(CallbackRoutineInstalled))
AF(VMESlaveInterruptEnabled) | AF(VMESlaveInterruptDisabled)
AF(SSIMasked) | AF(SSIUnmasked)
AG(determineBytesInMessage)
AG(TxMessageModeActive -> AF(WordsTransmitted & AF(TransmitterDisabled & AF(TxIBGInterruptReceived & AF(TransmitterEnabled & AF(NextMessageTransmitted))))))
AG(SSIErrInterrupt -> AF(callbackRoutineInstalled))
AF(SSIStatusRead)
AG(DPU_SSIError -> AF(ERRNOSet & ERRORReturned))
AF(SSIResetWrite)
AG(SSIRead -> BitWord)
AG(SSIWrite -> BitWord)
AF(addressLimitSet)
AF(eventTimeoutSet & bufferSwap)
AF(bufferSwapArmed)
AF(timeoutInterruptConditionCallbackInstalled)
AG(INTADR_EN -> AF(callbackRoutineInstalled))
AF(VMESlaveInterruptEnabledForDCI) | AF(VMESlaveInterruptDisabledForDCI)
AF(DCIInterruptConditionsMasked) | AF(DCIInterruptConditionsUnmasked)
AF(DCIHardwareCommandReorderBitSequence)
AF(normalMode) | AF(testMode)
testMode -> AF(pingPongBufferRead & pingPongBufferWrite)
testMode -> AF(pingPongBufferSwap)
AF(hardwareStatusRead & dataLevelTriggerRead & dataTimeoutTriggerRead & DCIEventModeRead & normalTestModeRead)
AF(pingPongBufferRead)
AF(SCM_DCI_WINConfigured)
AG(DCI_DataReceiveRate >= A)
AG(DPU_DCICallbackInstalled -> AF(INTERR_ENResponded))
AF(DCIStatusRegisterRead)
AG(DCIErrorOccurrence -> AF(ERRNOSet & ERRORReturned))
AG(DPU_DCIReadOperation -> EF(loadMultipleInstructionUsed & storeMultipleInstructionUsed & wordSizeIsB))
AG(DPU_DCIWriteOperation -> EF(wordSizeIsC))
AG(DPU_DCIReadOperation -> EF(wordSizeIsC))
AG(DPU_DCIWriteOperation -> EF(wordSizeIsB))
AF(DCIResetTriggered)
AG(DPU_CCMBootup -> AF(DPU_HK_STARTCreated & DPU_HK_STARTForwarded))
AG(DPU_CCMBootup -> AF(FSW_InitializedWithEEPROMDefaults))
AG(bootComplete & flightSoftwareInitializationComplete -> AF(ICUNotified))
AG(bootUp -> AF(DPU_CCMSpawned & DPU_DPASpawned & DPU_DCXSpawned & DPU_SCUISpawned & DPU_TMALISpawned))
AG(DPU_HKCollected -> AF(DPU_HKForwardedToDPU_SCUI))
AG((bootSuccessful & spacecraftCommunicationEstablished) -> AF(toggleBC_INDEX))
AG((commandProvided & (commandType == DPU_HK_START)) -> AF(resendDPU_HK_START))
AF(DPU_HKProduced)
AG(monitorTasks -> AF(reportInDPU_HK))
AG(groundCommandReceived -> AF(writeToDRAM & writeToVMEBus & writeToIOCC))
AG(commandReceived -> AF(calculateCHKS_addresseRange))
AG((DPU_HBEATInterval == A) -> AF(forwardDPU_HBEATToICU))
AG((watchdogInterval == 1) -> AF(strobeWatchdog))
AG(DPU_CMD -> AF(interpretDPU_CMD & dispatchDPU_CMD))
AG(commandReceived -> AF(echoCommand))
EF(rebootCommand)
EF(noopCommand)
AG(CLK_MSGReceived -> AF(forwardCLK_MSGToDPUTIS) & !CLK_MSGInDispatcherQueue)
AG(ACS_MSGReceived -> AF(forwardACS_MSGToDPUDPA) & !ACS_MSGInDispatcherQueue)
AG(unrecognizedMessageReceived -> AF(discardUnrecognizedMessage))
AG(unrecoverableError -> AG(lossOfCommandability | lossOfGroundCommunication) -> AF(recordError & discontinueStrobing))
AG(CSCReportError -> EF(includeErrorInDPU_HK))
AG(((errorCount_errorID > 250) -> E(EF(replaceWithErrorCodeSequence) U reportingPeriodEnd)))
AG(DPU_CMDReceived -> E(EF(checkCMDLength == expectedCMDLength) U (discardCMD & enqueueError)))
AG(commandRejected -> AF(errorReported & AF(AF(byteCodeErrno))))
AG(commandReceived | commandRejected -> AF(countsMaintained & AF(AF(parametersReported))))
AG(accessEEPROM -> AF(useDPU_EEPRM))
AG(communicateWithICU -> AF(useDPU_ICUI))
AG((errorInterrupt | pingPongTimeoutInterrupt | pingPongCompleteFlagInterrupt) -> AF(installCallbacks))
AG(dataFromDCI -> AF(makeDataAvailableToDPU_DPA & populateRingBuffer))
AG(setEventBitOrderMode -> EF(functionProvidedByDPU_TMALI))
AG(request -> EF(TMALI_HKProvidedByDPU_TMALIToDPU_CCM))
AG(initialization -> AF(ringBufferAllocated & E((bufferSize == TMALI_BUFFER_SIZE) U (bufferSize == defaultSize))))
AG(startup -> AF(pingPongLimitConfigured & E( frameLimit == TMALI_PP_LIMIT U (frameLimit == M_frames))))
AG(startup -> AF(dciInterfaceConfigured & E(dataTimeout == TMALI_TIMEOUT U (dataTimeout == N_milliseconds))))
AG(utilizeSCM_DCI_SR & utilizeERRNO -> AF(errorsDecoded & errorsPlacedOnQueue))
AG(DCIErrorInterrupt -> AF(callbackRoutineInstalled))
AG(startEventRingBuffer -> AF(placeAddressInTMALI_HK))
AG(communicateWithDCIInterface -> AF(useDPU_DCI))
AG(retrieveSC_TIME -> AF(timeStampSourcePackets))
AG(newData -> AF(notifySCU))
AG(commandReceivedFromSCU -> AF(commandAvailableToDPU_CCM))
AG(requestReceived -> AF(SCUI_HKProvided))
AG(applicationProducesData -> AF(segmentationAllowed))
AG(highPriorityDataArrival -> AF(highPriorityDataProcessing)) & AG((highPriorityDataArrival & lowPriorityDataProcessing) -> AF(highPriorityDataProcessing))
AG(receiveTelecommand -> AF(forwardTelecommand))
AG(initialization -> AF(deliverAtInitialRate)) & AG(rateAdjusted -> AF(deliverAtAdjustedRate))
AG((prepareSTPDU) | (noData -> AF(unchangedCounter)))
AG(bufferFull -> AF(discardData & returnError & reportErrorToDPU_CCM))
AG(failureToReadSubaddress -> AF(cancelWrite & recordNewData & reportErrorToDPU_CCM))
AG(SCUFailsToRead -> AF(cancelWrite & recordNewData & reportError)) & AG(initialization -> (SCU_POLL_RATE == J)) & AG(SCU_POLL_RATEModified -> EF(SCU_POLL_RATE == newValue))
AG(errorDetected -> EF(reportToDPU_CCM))
AG(checksumComputed & checksumMismatch -> AF(errorReportedToDPUCCM)) & AG(checksumComputed & !checksumMismatch -> AF(commandForwardedToDPUCCM))
AG(DPU_SCUICommunication -> EF(useDPU_1553))
AG(uncompressedDataPackage -> EF(compressedDataPackage))
AG(compressedDataPackage -> EF(forwardedToDPU_SCUI))
AG(error -> EF(reportToDPU_CCM))
AF(accessSC_TIME)
AF(accessUT_DELTA)
AG(automaticTimeSynchronization -> AF(setSC_TIME & enable1PPSClockJam))
AG(!automaticTimeSynchronization -> AF(jamSC_TIME))
AF(enableAutomaticTimeSynchronization & disableAutomaticTimeSynchronization)
AF(select1PPSsignal)
AG(errorReport -> AF(setERRNO & returnERROR))
AG(CSCTransmitMessage -> AF(APIUsed))
AG(receiptFromICU -> AF(forwardToDPU_CCM))
AG(errorReport -> AF(inclusioninDPU_HK))
AG((DPU_CMD -> AF(computeCHKS_16)) & (!expectedChecksum -> (discardCommand & AF(enqueueErrorToDPU_CCM) & AF(transmitNAK))))
AG((!lengthMatch -> AF(discardCommand & AF(enqueueErrorToDPU_CCM) & AF(transmitNAK))))
AG(installISR -> AF(invokeISR -> AF(receiveCaommands & processCommands)))
AG(formatMessage)
AG(collectData -> AF(calculateDrift))
AG(obtainInitialFrameTime)
AG(XMode | YMode | XYMode)
AG(imageMode -> AF(calculateMemoryLocationEvent & incrementMemoryLocationEvent & handleValidEvent & producePROD_IMAGE))
AG(imageMode -> AF(shiftFramesspacecraftDrift & coaddFrameToImage))
AG(imageMode & commandToProduceFindingChart -> AF(producePROD_FINDING_CHART & parameterizeSourcePosition & parameterizeSourceIntensity))
AG(commandEventMode -> AF(collectPhotonEvents & producePROD_EVENT))
AG((commanded & collectingEventData) -> AF(producePROD_ACS_MSG))
AG(eventMode -> AF(provideWindowPerExposure & commandableWindowSize & commandableExposureTime))
AF(rawEventListMode) | AF(channelBoundaryMode) | AF(centroidConfirmationMode) | AF(intensifierCharacteristicsMode)
AG(imageMode -> AF(binningImages))
AG(rawEventListMode -> AF(collectTransmitEvents))
AG(centroidConfirmationMode -> AF(PROD_CENTROID_CONF) & AF(divideImageIntoRegions) & AF(processRegionsToFormConfirmationImages) & AF(sendConfirmationImagesToSSR))
AF(intensifierCharacteristicsMode -> EF(PROD_INTENSE_CHAR))
AG((newGRBObserved & XRT_POSAvailable) -> AF(shiftAndResizeWindows))
AG(trackingEnabled -> AF(producingPROD_TRACKING_REC))
AG(providingHeartbeat)
AF(request -> EF(provideDPA_HK))
AG((collectEventModeData -> AF(preserveTimeResolutionevent) & AF(preserveSpatialResolutionevent)))
A(!accessMemory W boundsCheck)
AG(collectEventsOverFullFOV)
A(!useFirstTrackingImage W enterImageMode)
AG(calculateDrift -> AF(performShiftAndAdd))
AG(!obtainAcceptableTrackingSolution -> AF(ApplyRecentTrackingSolution & reportError))
AG(error -> AF(reportErrorToDPU_CCM))
AG((DPU_SCUI_FIFO_full & attemptEnqueue) -> AF(suspendEventProcessing & A((dropIncomingData) U (FIFOHasRoom) & reportError)))
#AG(forall i: MODISDataProductProduced_i -> (withinVolumeAllocation_i & withinProcessingLoadAllocation_i))
AG((LGCS & desiredGearPosition) -> EF(processDesiredGearPosition))
AG(analogicalSwitchSensor -> AF(processAnalogicalSwitchStatus1) & AF(processAnalogicalSwitchStatus2) & AF(processAnalogicalSwitchStatus3))
AG(hydraulicCircuitPressureSensor -> AF(processHydraulicCircuitPressure1)) & AF(processHydraulicCircuitPressure2) & AF(processHydraulicCircuitPressure3)
AG(doorClosedSensor -> AF(processDoorCloseStatus1)) & AF(processDoorCloseStatus2) & AF(processDoorCloseStatus3)
AG(LGCS -> AF(generalEVActuationCommand))
AG(LGCS -> AF(doorClosingEVActuationCommand))
AG(LGCS -> AF(feedback))
AG(sensorData -> (AF(validReading1 & validReading2 & validReading3 & (reading1 == reading2) & (reading2 == reading3)) -> EF(overallSensorValue == reading1 & validOverallSensorValue)))
AG(sensorData -> (AF(validReading1 & validReading2 & validReading3 & ((reading1 != reading2) | (reading2 != reading3) | (reading1 != reading3)) -> EF(!validOverallSensorValue))))
AG(sensorData & validReading1 & validReading2 & (reading1 != reading2) -> AF(AG(!validReading1 & !validReading2) & EF(!validOverallSensorValue)))
AG(sensorData & ((invalidReading1 & invalidReading2) | (invalidReading1 & invalidReading3) | (invalidReading2 & invalidReading3)) -> AF(!validOverallSensorValue))
AG(!validOverallSensorValue -> AF(sensorFailure))
AG((doorOpenStatus == open & doorClosedStatus != closed) -> AF(doorOpeningEV == closed))
AG((gearShockAbsorberStatus == Relaxed) -> AF(GearRetractionEV == open)) & AG((gearShockAbsorberStatus != Relaxed) -> AF(feedbackIndicator == Green & DoorClosingEV == open))
AG((doorClosedStatus == Closed) & (doorOpeningStatus != Open) -> AF(doorClosingEV == closed))
AG((retractionSequence == Executing) & (gearPosition == DownDesired) -> AF(retractionSequence == Halted & actions == Reverted))
AG((extensionSequence == Executing) & (gearPosition == UpDesired) -> AF(extensionSequence == Halted & actions == Reverted))
AG(desiredGearPositionReceived -> AF(analogicalSwitchClosed -> openGeneralEV))
AG(desiredGearPositionReceived & analogicalSwitchOpen -> AF (detectAnalogicalSwitchFailure))
AG((generalEVOpened & hydraulicCircuitPressure >= 30000 & hydraulicCircuitPressure < 35000) -> AF(doorOpeningEV | doorClosingEV | gearRetractionEV | gearExtensionEV))
AG(generalEVOpened -> AF(doorOpeningEV | doorClosingEV | gearRetractionEV | gearExtensionEV))
AG((doorOpeningEVclosed | doorClosingEVclosed | gearRetractionEVclosed | gearExtensionEVclosed) -> AF(specificEVopen))
AG((doorOpeningEVclosed | doorClosingEVclosed | gearRetractionEVclosed | gearExtensionEVclosed) -> AF(generalEVclose))
AG((doorOpeningEVclosed -> AF(doorClosingEVopen)) & (doorClosingEVclosed -> AF(doorOpeningEVopen)) & (gearRetractionEVclosed -> AF(gearExtensionEVopen)) & (gearExtensionEVclosed -> AF(gearRetractionEVopen)))
AG((noDesiredGearPositionReceived & analogicalSwitchClosed & retractionExtensionSequencesCompleted) -> AF(detectAnalogicalSwitchFailure))
AG((generalEVOpened & hydraulicCircuitPressure < 30000) -> AF(detectGeneralHydraulicElectroValveFailure))
AG((generalEVClosed & hydraulicCircuitPressure >= 30000 & hydraulicCircuitPressure < 35000) -> AF(detectGeneralHydraulicElectroValveFailure))
AG((doorOpeningEVOpened & (doorClosedStatusClosed | doorOpenStatusNotOpen)) -> AF(detectDoorsFailure))
AG((doorClosingEVOpened & (doorOpenStatusOpen | doorClosedStatusNotClosed)) -> AF(detectDoorsFailure))
AG((gearRetractionEVOpened & (gearExtendedStatusExtended | gearRetractedStatusNotRetracted)) -> AF(detectGearsFailure))
AG((gearExtensionEVOpened & (gearRetractedStatusRetracted | gearExtendedStatusNotExtended)) -> AF(detectGearsFailure))
AG((retractionSequence | extensionSequence) & failureDetected -> AF(haltSequence & feedbackIndicatorRed))
AG(sensorManagerDataReceived -> AF(validateSensorDataActivated))
AG(validateSensorDataActivated -> AF(readingsProcessed))
AG(validateSensorDataActivated & readingsValidEqual -> AF(sensorValueValid))
AG(validateSensorDataActivated & !readingsValidEqual -> AF(sensorValueInvalid))
AG(validateSensorDataActivated & readingsValidNotAllEqual -> AF(readingDifferentInvalid & sensorValueValid))
AG(validateSensorDataActivated & oneReadingEliminated & !readingsValidEqual -> AF(sensorValueInvalid))
AG(validateSensorDataActivated & oneReadingInvalid & remainingReadingsValidEqual -> AF(sensorValueValid))
AG(validateSensorDataActivated & atLeastTwoReadingsInvalid -> AF(sensorValueInvalid))
AG(sensorValueInvalid -> AF(FailureEventRaised))
AG(sensorValueValid -> AF(sequenceControllerReceiveValue & waitForSensorData))
AG((retractGearsActive | extendGearsActive) -> AF(GearsInTransitEventRaised))
AG(GearsInTransitEventRaised -> AF(FeedbackVariable == Amber))
AG(moveGearsActive -> AF(GeneralEVActuationCommandOpen))
AG(PressurizationEventRaised & OpenGeneralEVDelayTimeoutEventRaised -> AF(DoorOpeningEVActuationCommandOpen & waitForDoorsOpenActive))
AG(waitForDoorsOpenActive & (DoorOpenStatusNotOpen | DoorClosedStatusClosed) -> A((waitForDoorsOpenActive) W DoorsOpeningTimeoutEventRaised))
AG(waitForDoorsOpenActive & DoorOpenStatusOpen & DoorClosedStatusNotClosed -> AF(!waitForDoorsOpenActive & DoorOpeningEVCommandClosed))
AG((!waitForDoorsOpenActive & DesiredGearPositionUp & GearShockAbsorberStatusRelaxed & ConsecutiveSpecificEVDelayTimeOutEventRaised) -> AF(GearRetractionEVCommandOpen & waitForGearsRetractedActive))
AG((!GearShockAbsorberStatusRelaxed) -> AF(PlaneOnGroundEventRaised))
AG((waitForGearsRetractedActive & (GearRetractedStatusNotRetracted | GearExtendedStatusExtended)) -> A(waitForGearsRetractedActive U GearsRetractionTimeoutEventRaised))
AG((waitForDoorsClosedActive & (DoorClosedStatusNotClosed | DoorOpenStatusOpen)) -> A(waitForDoorsClosedActive U DoorsClosingTimeoutEventRaised))
AG((waitForDoorsClosedActive & DoorClosedStatusClosed & DoorOpenStatusNotOpen) -> AF((!waitForDoorsClosedActive) & (DoorClosingEVActuationCommand == Closed)))
AG((!waitForDoorsClosedActive & CloseGeneralEVDelayTimeoutEventRaised) -> AF(GeneralEVActuationCommand == Closed))
AG((!waitForDoorsOpenActive & DesiredGearPosition == Down & ConsecutiveSpecificEVDelayTimeoutEventRaised) -> AF((GearExtensionEVActuationCommand == Open) & waitForGearsExtendedActive))
AG((waitForGearsExtendedActive & ((GearExtendedStatusAny == NotExtended) | (GearRetractedStatusAny == Retracted))) -> A(waitForGearsExtendedActive U GearsExtensionTimeoutEventRaised))
AG((waitForGearsExtendedActive & (GearExtendedStatusAll == Extended) & (GearRetractedStatusAll == NotRetracted)) -> AF(!waitForGearsExtendedActive & (GearExtensionEVActuationCommand == Closed)))
AG((!waitForGearsExtendedActive) -> AF(GearsExtendedEventRaised))
AG(GearsExtendedEventRaised -> AF(FeedbackVariable == Green))
AG((waitForGearsExtendedEnded & ConsecutiveSpecificEVDelayTimeoutEventRaised) -> EF((DoorClosingEVActuationCommand == Open) & waitForDoorsClosedActivated))
AG((LGCSExecutingSequence & DesiredGearPositionReceived) -> EF(RevertEventRaised))
AG((RevertEventRaised) -> AF(AllActionsReverted))
AG((RetractionSequenceReverted) -> AF(GearsExtendedEventRaised))
AG((ExtensionSequenceReverted) -> AF(GearsRetractedEventRaised))
AG((DesiredGearPositionReceived) -> AF(waitForAnalogicalSwitchClosedActivated))
AG((waitForAnalogicalSwitchClosedActivated & AnalogicalSwitchStatusOpen) -> A(waitForAnalogicalSwitchClosedActive U AnalogicalSwitchClosingTimeoutEventRaised))
AG((waitForAnalogicalSwitchClosedActivated & AnalogicalSwitchStatusClosed) -> AF(!waitForAnalogicalSwitchClosedActivated & moveGearsActivated))
AG(DesiredGearPositionReceived -> AF(AnalogicalSwitchClosingTimeoutEventRaised))
AG((AnalogicalSwitchClosingTimeoutEventRaised & AnalogicalSwitchStatus == Open) -> AF(FailureEventRaised))
AG((GeneralEVActuationCommand == Open) -> AF(waitForHydraulicPressureActivated))
AG((waitForHydraulicPressureActive & HydraulicCircuitPressure < 30000) -> A(waitForHydraulicPressureActive W PressurizationTimeoutEvent))
AG((waitForHydraulicPressureActive & HydraulicCircuitPressure >= 30000 & HydraulicCircuitPressure < 35000) -> (AF(!waitForHydraulicPressureActive) & AF(PressurizationEvent)))
AG(GeneralEVActuationCommandVariable== Open -> AF (OpenGeneralEVDelayTimeoutEventRaised))
AG(SpecificEVActuationCommandVariable == Closed -> AF(ConsecutiveSpecificEVDelayTimeoutEventRaised))
AG(SpecificEVActuationCommandVariable == Closed -> AF(CloseGeneralEVDelayTimeoutEventRaised))
AG(SpecificEVActuationCommandVariable == Closed -> AF(ContrarySpecificEVDelayTimeoutEventRaised))
AG(ContrarySpecificEVDelayTimeoutEventRaised -> AF(ContrarySpecificEVActuationCommandVariable == Open))
AG(moveGearsActive -> AF(waitForAnalogicalSwitchOpenActive))
AG((waitForAnalogicalSwitchOpenActive & AnalogicalSwitchStatus == Closed) -> A((waitForAnalogicalSwitchOpenActive) W AnalogicalSwitchOpeningTimeoutEventRaised))
AG(waitForAnalogicalSwitchOpenActive & AnalogicalSwitchStatus == Open -> AF(waitForAnalogicalSwitchOpenEnd & awaitingDesiredGearPosition))
AG(waitForAnalogicalSwitchOpenActive -> AF(AnalogicalSwitchOpenTimeoutEventRaised))
AG((AnalogicalSwitchOpenTimeoutEventRaised & AnalogicalSwitchStatus == Closed) -> AF(FailureEventRaised))
AG(GeneralEV == Open -> AF(PressurizationTimeoutEventRaised))
AG((PressurizationTimeoutEventRaised & HydraulicCircuitPressure < 30000) -> AF(FailureEventRaised))
AG(GeneralEVVariable == Close -> AF(DepressurizationTimeoutEventRaised))
AG((DepressurizationTimeoutEventRaised & (HydraulicCircuitPressure >= 30000 & HydraulicCircuitPressure < 35000)) -> AF(FailureEventRaised))
AG((DoorOpeningEVActuationCommandVariable == Open) -> AF(DoorsOpeningTimeoutEventRaised))
AG((DoorsOpeningTimeoutEventRaised & (EF(DoorClosedStatusVariable == Closed))) -> AF(FailureEventRaised))
AG((DoorsOpeningTimeoutEventRaised & AF(DoorOpenStatusVariable != Open)) -> AF(FailureEventRaised))
AG (DoorClosingEVActuationCommandVariable == Open -> AF (DoorsClosingTimeoutEventRaised))
AG((DoorsClosingTimeoutEventRaised & AF(DoorOpenStatusVariable == Open)) -> AF(FailureEventRaised))
AG((DoorsClosingTimeoutEventRaised & AF(DoorClosedStatusVariable != Closed)) -> AF(FailureEventRaised))
AG(GearRetractionEVActuationCommandVariable == Open -> AF(GearsRetractionTimeoutEventRaised))
AG((GearsRetractionTimeoutEventRaised & AF(GearExtendedStatusVariable == Extended)) -> AF(FailureEventRaised))
AG((GearsRetractionTimeoutEventRaised & AF(GearRetractedStatusVariable != Retracted)) -> AF(FailureEventRaised))
AG(GearExtensionEVActuationCommandVariable == Open -> AF(GearsExtensionTimeoutEventRaised))
AG((GearsExtensionTimeoutEventRaised & AF(GearRetractedStatusVariable == Retracted)) -> AF(FailureEventRaised))
AG((GearsExtensionTimeoutEventRaised & AF(GearExtendedStatusVariable != Extended)) -> AF(FailureEventRaised))
AG((FailureEventRaised & (RetractionSequenceActive | ExtensionSequenceActive)) -> AF(HaltActiveSequenceEventRaised))
AG(FailureEventRaised -> AF(FailureDetectedEventRaised))
AG(FailureDetectedEventRaised -> AF(FeedbackVariable == Red))
AG(HaltActiveSequenceEventRaised -> EF(haltActiveSequenceProcedureActivated))
AG(haltActiveSequenceProcedureActivated -> AF(currentSequenceHalted))
AF(CASDetectsTraffic)
AG(TrafficDetected -> AF(SufficientTime & CollisionAvoidanceFunction))
AG(withinRange -> detectCooperativeTraffic)
AG(withinAzimuthFOR -> detectCooperativeTraffic)
AG(withinElevationFOR -> detectCooperativeTraffic)
AG(trafficDetected -> AF(tracking))
AG((cooperativeTraffic & withinAzimuthFOR & withinElevationFOR) -> AG (tracking))
AG(inSurveillanceVolume -> (numCooperativeAircraft >= 35))
AG(inSurveillanceVolume -> (trackedCooperativeAircraft_totalCooperativeAircraft >= 0.95))
AG(trackEstablished & trackMaintained & confidenceMet)
AG(falseTracks_totalTracks < 13)
AG(trackingTraffic -> AF (evaluatingCollisionRisk & existingCollisionThreat))
AG(CASDetectsTraffic -> AF(collisionThreat))
AG(tracked -> AF(collisionPotentialDetermined))
AG(collisionPotentialRemoved -> AF(informPilot))
AG(collisionThreat -> AF(trafficPrioritized))
AG(collisionThreat -> AF(avoidanceManeuverDetermined))
AG(otherAircraftManeuvering -> AF(maneuverRecommendationRevised))
AF(avoidanceCommanded)
AG(commandManeuver -> AF(performManeuver))
AG(commandManeuver_i -> AF(performManeuver_i)) 
